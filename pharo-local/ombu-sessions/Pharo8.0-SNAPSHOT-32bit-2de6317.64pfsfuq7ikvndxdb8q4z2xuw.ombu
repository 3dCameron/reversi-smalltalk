OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2019-11-03T19:54:55.140611-08:00' ],		#prior : OmReference [ 'Pharo8.0-SNAPSHOT-32bit-2de6317.e6r5kjk4hpecfg68iz65ygj2j', '8394' ],		#self : OmReference [ '1' ]	},	#content : EpRedo {		#entryReferences : OrderedCollection [			OmReference [ '64pfsfqw12rwj4zsdgt7pmuxr', '1' ],			OmReference [ '64pfsfqw12rwj4zsdgt7pmuxr', '2' ],			OmReference [ '64pfsfqw12rwj4zsdgt7pmuxr', '3' ],			OmReference [ '64pfsfqw12rwj4zsdgt7pmuxr', '4' ],			OmReference [ '64pfsfqw12rwj4zsdgt7pmuxr', '5' ],			OmReference [ '64pfsfqw12rwj4zsdgt7pmuxr', '6' ],			OmReference [ '64pfsfqw12rwj4zsdgt7pmuxr', '7' ],			OmReference [ '64pfsfqw12rwj4zsdgt7pmuxr', '8' ]		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ],		#time : DateAndTime [ '2019-11-03T19:54:55.147407-08:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #Reversi,		#affectedPackageName : #Reversi	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ],		#time : DateAndTime [ '2019-11-03T19:54:55.157493-08:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiGame\r\tinstanceVariableNames: \'board turn state bScore wScore legalMoves\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiGame,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #board,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #turn,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #state,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #bScore,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #wScore,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #legalMoves,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiGame class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiGame class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiGame				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ],		#time : DateAndTime [ '2019-11-03T19:54:55.163588-08:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiCell\r\tinstanceVariableNames: \'neighbors state\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiCell,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiCell					},					#name : #neighbors,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiCell					},					#name : #state,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiCell class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiCell class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiCell				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ],		#time : DateAndTime [ '2019-11-03T19:55:02.40221-08:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tboard := ReversiBoard new.',			#stamp : 'CameronBierwagen 11/3/2019 19:55',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ],		#time : DateAndTime [ '2019-11-03T19:55:02.409685-08:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiBoard\r\tinstanceVariableNames: \'cells\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiBoard,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiBoard					},					#name : #cells,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiBoard class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiBoard class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiBoard				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ],		#time : DateAndTime [ '2019-11-03T19:55:02.420391-08:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #EyeInspector			},			#name : #updateList,			#protocol : #event-handling,			#sourceCode : 'updateList\r\t"update the list of elements displayed according to the new object"\r\r\t| elements |\r\t"\tself haltOnce."\r\telements := self generateElements.\r\tself list items = elements\r\t\tifTrue: [ ^ self ].\r\t"first reset the items to make sure we don\'t interfere with the display block"\r\t"self list items: #()."\r\tself list displayBlock: [ :eyeElement | self labelFor: eyeElement ].\r\tself list items: elements.\r\r\t"handle when last item of list is removed"\r\tself list selection selectedIndex > self list items size\r\t\tifTrue: [ self list setSelectedIndex: self list listItems size ].\r\r\t"handle when selected dictionary key is removed"\r\tself list selectIndex: self list selection selectedIndex.\r\tself list menu: [ :aMenu | self inspectionMenu: aMenu ]',			#stamp : '',			#package : #Spec2-Inspector		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #EyeInspector			},			#name : #updateList,			#protocol : #event-handling,			#sourceCode : 'updateList\r\t"update the list of elements displayed according to the new object"\r\r\t| elements |\r\t"\tself haltOnce."\r\telements := self generateElements.\r\tself list items = elements\r\t\tifTrue: [ ^ self ].\r\t"first reset the items to make sure we don\'t interfere with the display block"\r\t"self list items: #()."\r\tself list display: [ :eyeElement | self labelFor: eyeElement ].\r\tself list items: elements.\r\r\t"handle when last item of list is removed"\r\tself list selection selectedIndex > self list items size\r\t\tifTrue: [ self list setSelectedIndex: self list listItems size ].\r\r\t"handle when selected dictionary key is removed"\r\tself list selectIndex: self list selection selectedIndex.\r\tself list menu: [ :aMenu | self inspectionMenu: aMenu ]',			#stamp : 'CameronBierwagen 11/3/2019 19:55',			#package : #Spec2-Inspector		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ],		#time : DateAndTime [ '2019-11-03T19:55:02.42401-08:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tstate := $_.\r\tneighbors := Array new: 8.',			#stamp : 'CameronBierwagen 11/3/2019 19:55',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ],		#time : DateAndTime [ '2019-11-03T19:55:02.42678-08:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcells := Array2D new: 8.\r\tcells atAllPut: ReversiCell new.\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 19:55',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T19:55:46.156554-08:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpSessionSnapshot {		#imageName : '/home/cameron/Pharo/images/Pharo 8.0 - 64bit (development version, latest) - Reversi/Pharo 8.0 - 64bit (development version, latest) - Reversi.image'	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T19:57:38.190336-08:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiCell\r\tinstanceVariableNames: \'neighbors state\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiCell,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiCell					},					#name : #neighbors,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiCell					},					#name : #state,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiCell class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiCell class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiCell				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		},		#protocol : #setter	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:10:33.493046-08:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_ & (pieceType = $B | pieceType = $W)) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:10',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:11:17.457462-08:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_ & (pieceType = $B | pieceType = $W)) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:10',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_ & (pieceType = $B | $W)) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:11',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:11:47.8514-08:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_ & (pieceType = $B | $W)) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:11',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_ and: [pieceType = $B or: $W]) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:11',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:14:36.018561-08:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_ and: [pieceType = $B or: $W]) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:11',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_ and: [(pieceType = $B) or: [pieceType = $W]]) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:14',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:14:49.852389-08:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_ and: [(pieceType = $B) or: [pieceType = $W]]) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:14',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_ and: [pieceType = $B | $W]) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:14',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:15:39.362002-08:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_ and: [pieceType = $B | $W]) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:14',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_ & (pieceType = $B | $W)) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:15',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:16:16.926369-08:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_ & (pieceType = $B | $W)) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:15',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state == $_ & (pieceType == $B | $W)) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:16',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:19:27.376389-08:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state == $_ & (pieceType == $B | $W)) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:16',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(pieceType = $B | $W) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:19',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:21:09.418837-08:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(pieceType = $B | $W) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:19',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(pieceType = $_) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:21',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:23:05.261532-08:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(pieceType = $_) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:21',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:23',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:27:38.599491-08:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcells := Array2D new: 8.\r\tcells atAllPut: ReversiCell new.\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 19:55',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcells := Array2D new: 8.\r\t1 to: 8 do: [ :x | 1 to: 8 do: [ :y | cells at: x at: y put: ReversiCell new. ] ].\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:27',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:28:15.636558-08:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcells := Array2D new: 8.\r\t1 to: 8 do: [ :x | 1 to: 8 do: [ :y | cells at: x at: y put: ReversiCell new. ] ].\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:27',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcells := Array2D new: 8.\r\t1 to: 8 do: [ :x | 1 to: 8 do: [ :y | cells at: x at: y put: ReversiCell new. ] ].\r\t(cells at: 4 at: 4) placePiece: $W.\r\t(cells at: 5 at: 5) placePiece: $W.\r\t(cells at: 4 at: 5) placePiece: $W.\r\t(cells at: 5 at: 4) placePiece: $W.\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:28',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:28:24.276243-08:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcells := Array2D new: 8.\r\t1 to: 8 do: [ :x | 1 to: 8 do: [ :y | cells at: x at: y put: ReversiCell new. ] ].\r\t(cells at: 4 at: 4) placePiece: $W.\r\t(cells at: 5 at: 5) placePiece: $W.\r\t(cells at: 4 at: 5) placePiece: $W.\r\t(cells at: 5 at: 4) placePiece: $W.\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:28',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcells := Array2D new: 8.\r\t1 to: 8 do: [ :x | 1 to: 8 do: [ :y | cells at: x at: y put: ReversiCell new. ] ].\r\t(cells at: 4 at: 4) placePiece: $W.\r\t(cells at: 5 at: 5) placePiece: $W.\r\t(cells at: 4 at: 5) placePiece: $B.\r\t(cells at: 5 at: 4) placePiece: $B.\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:28',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:30:50.550229-08:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiBoard\r\tinstanceVariableNames: \'cells\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiBoard,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiBoard					},					#name : #cells,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiBoard class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiBoard class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiBoard				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		},		#protocol : #'public - string reading'	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:32:33.547427-08:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\t\t\t\r\tString streamContents: [ :stream ]',			#stamp : 'CameronBierwagen 11/3/2019 20:32',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:32:56.175995-08:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiCell\r\tinstanceVariableNames: \'neighbors state\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiCell,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiCell					},					#name : #neighbors,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiCell					},					#name : #state,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiCell class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiCell class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiCell				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		},		#protocol : #accessor	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:33:33.68207-08:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #state,			#protocol : #accessor,			#sourceCode : 'state\r\t^state',			#stamp : 'CameronBierwagen 11/3/2019 20:33',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:42:14.573094-08:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\t\t\t\r\tString streamContents: [ :stream ]',			#stamp : 'CameronBierwagen 11/3/2019 20:32',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\tString streamContents: [ :stream | \r\t\t1 to: 8 do: [ :x | 1 to: 8 do: [ :y | stream nextPut: (cells at: x at: y) state.  ] ]\r\t]\r\t\t"."',			#stamp : 'CameronBierwagen 11/3/2019 20:42',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:42:22.090103-08:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\tString streamContents: [ :stream | \r\t\t1 to: 8 do: [ :x | 1 to: 8 do: [ :y | stream nextPut: (cells at: x at: y) state.  ] ]\r\t]\r\t\t"."',			#stamp : 'CameronBierwagen 11/3/2019 20:42',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\tString streamContents: [ :stream | \r\t\t1 to: 8 do: [ :x | 1 to: 8 do: [ :y | stream nextPut: (cells at: x at: y) state.  ] ]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 20:42',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:44:12.482514-08:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\tString streamContents: [ :stream | \r\t\t1 to: 8 do: [ :x | 1 to: 8 do: [ :y | stream nextPut: (cells at: x at: y) state.  ] ]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 20:42',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\tString streamContents: [ :stream | \r\t\t1 to: 8 do: [ :x | 1 to: 8 do: [ :y | stream nextPut: (cells at: x at: y) state  ] ]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 20:44',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:44:51.492472-08:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\tString streamContents: [ :stream | \r\t\t1 to: 8 do: [ :x | 1 to: 8 do: [ :y | stream nextPut: (cells at: x at: y) state  ] ]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 20:44',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\tString streamContents: [ :stream | \r\t\t1 to: 8 do: [ :x | 1 to: 8 do: [ :y | stream nextPut: (cells at: x at: y) state  ]. stream cr ]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 20:44',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T20:57:16.327371-08:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\tString streamContents: [ :stream | \r\t\t1 to: 8 do: [ :x | 1 to: 8 do: [ :y | stream nextPut: (cells at: x at: y) state  ]. stream cr ]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 20:44',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\t^String streamContents: [ :stream | \r\t\t1 to: 8 do: [ :x | 1 to: 8 do: [ :y | stream nextPut: (cells at: x at: y) state  ]. stream cr ]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 20:57',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T21:05:32.961657-08:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\t^String streamContents: [ :stream | \r\t\t1 to: 8 do: [ :x | 1 to: 8 do: [ :y | stream nextPut: (cells at: x at: y) state  ]. stream cr ]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 20:57',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\t^String streamContents: [ :stream | \r\t\tstream nextPutAll: \'  1 2 3 4 5 6 7 8\'; cr.\t\t\r\t\t1 to: 8 do: [ :x |\r\t\t\t1 to: 8 do: [ :y |\r\t\t\t\tstream space; nextPut: (cells at: x at: y) state\r\t\t\t]. stream cr\r\t\t]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 21:05',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T21:08:09.472749-08:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\t^String streamContents: [ :stream | \r\t\tstream nextPutAll: \'  1 2 3 4 5 6 7 8\'; cr.\t\t\r\t\t1 to: 8 do: [ :x |\r\t\t\t1 to: 8 do: [ :y |\r\t\t\t\tstream space; nextPut: (cells at: x at: y) state\r\t\t\t]. stream cr\r\t\t]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 21:05',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\t^String streamContents: [ :stream | \r\t\tstream nextPutAll: \'  1 2 3 4 5 6 7 8\'; cr.\t\t\r\t\t1 to: 8 do: [ :x |\r\t\t\tstream nextPut: (x + 64); space.\r\t\t\t1 to: 8 do: [ :y |\r\t\t\t\tstream space; nextPut: (cells at: x at: y) state\r\t\t\t]. stream cr\r\t\t]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 21:08',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T21:08:37.256199-08:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\t^String streamContents: [ :stream | \r\t\tstream nextPutAll: \'  1 2 3 4 5 6 7 8\'; cr.\t\t\r\t\t1 to: 8 do: [ :x |\r\t\t\tstream nextPut: (x + 64); space.\r\t\t\t1 to: 8 do: [ :y |\r\t\t\t\tstream space; nextPut: (cells at: x at: y) state\r\t\t\t]. stream cr\r\t\t]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 21:08',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\t^String streamContents: [ :stream | \r\t\tstream nextPutAll: \'  1 2 3 4 5 6 7 8\'; cr.\t\t\r\t\t1 to: 8 do: [ :x |\r\t\t\t"stream nextPut: (x + 64); space."\r\t\t\t1 to: 8 do: [ :y |\r\t\t\t\tstream space; nextPut: (cells at: x at: y) state\r\t\t\t]. stream cr\r\t\t]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 21:08',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T21:09:34.854879-08:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\t^String streamContents: [ :stream | \r\t\tstream nextPutAll: \'  1 2 3 4 5 6 7 8\'; cr.\t\t\r\t\t1 to: 8 do: [ :x |\r\t\t\t"stream nextPut: (x + 64); space."\r\t\t\t1 to: 8 do: [ :y |\r\t\t\t\tstream space; nextPut: (cells at: x at: y) state\r\t\t\t]. stream cr\r\t\t]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 21:08',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\t^String streamContents: [ :stream | \r\t\tstream nextPutAll: \'  1 2 3 4 5 6 7 8\'; cr.\t\t\r\t\t1 to: 8 do: [ :x |\r\t\t\tstream nextPut: (x + 64) utf8Decoded; space.\r\t\t\t1 to: 8 do: [ :y |\r\t\t\t\tstream space; nextPut: (cells at: x at: y) state\r\t\t\t]. stream cr\r\t\t]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 21:09',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T21:13:43.958686-08:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\t^String streamContents: [ :stream | \r\t\tstream nextPutAll: \'  1 2 3 4 5 6 7 8\'; cr.\t\t\r\t\t1 to: 8 do: [ :x |\r\t\t\tstream nextPut: (x + 64) utf8Decoded; space.\r\t\t\t1 to: 8 do: [ :y |\r\t\t\t\tstream space; nextPut: (cells at: x at: y) state\r\t\t\t]. stream cr\r\t\t]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 21:09',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\t^String streamContents: [ :stream | \r\t\tstream nextPutAll: \'  1 2 3 4 5 6 7 8\'; cr.\t\t\r\t\t1 to: 8 do: [ :x |\r\t\t\tstream nextPut: Character value: x + 65; space.\r\t\t\t1 to: 8 do: [ :y |\r\t\t\t\tstream space; nextPut: (cells at: x at: y) state\r\t\t\t]. stream cr\r\t\t]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 21:13',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T21:13:56.577163-08:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\t^String streamContents: [ :stream | \r\t\tstream nextPutAll: \'  1 2 3 4 5 6 7 8\'; cr.\t\t\r\t\t1 to: 8 do: [ :x |\r\t\t\tstream nextPut: Character value: x + 65; space.\r\t\t\t1 to: 8 do: [ :y |\r\t\t\t\tstream space; nextPut: (cells at: x at: y) state\r\t\t\t]. stream cr\r\t\t]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 21:13',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\t^String streamContents: [ :stream | \r\t\tstream nextPutAll: \'  1 2 3 4 5 6 7 8\'; cr.\t\t\r\t\t1 to: 8 do: [ :x |\r\t\t\tstream nextPut: (Character value: x + 65); space.\r\t\t\t1 to: 8 do: [ :y |\r\t\t\t\tstream space; nextPut: (cells at: x at: y) state\r\t\t\t]. stream cr\r\t\t]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 21:13',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T21:14:05.385446-08:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\t^String streamContents: [ :stream | \r\t\tstream nextPutAll: \'  1 2 3 4 5 6 7 8\'; cr.\t\t\r\t\t1 to: 8 do: [ :x |\r\t\t\tstream nextPut: (Character value: x + 65); space.\r\t\t\t1 to: 8 do: [ :y |\r\t\t\t\tstream space; nextPut: (cells at: x at: y) state\r\t\t\t]. stream cr\r\t\t]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 21:13',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\t^String streamContents: [ :stream | \r\t\tstream nextPutAll: \'  1 2 3 4 5 6 7 8\'; cr.\t\t\r\t\t1 to: 8 do: [ :x |\r\t\t\tstream nextPut: (Character value: x + 64); space.\r\t\t\t1 to: 8 do: [ :y |\r\t\t\t\tstream space; nextPut: (cells at: x at: y) state\r\t\t\t]. stream cr\r\t\t]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 21:14',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T21:14:23.725407-08:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\t^String streamContents: [ :stream | \r\t\tstream nextPutAll: \'  1 2 3 4 5 6 7 8\'; cr.\t\t\r\t\t1 to: 8 do: [ :x |\r\t\t\tstream nextPut: (Character value: x + 64); space.\r\t\t\t1 to: 8 do: [ :y |\r\t\t\t\tstream space; nextPut: (cells at: x at: y) state\r\t\t\t]. stream cr\r\t\t]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 21:14',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\t^String streamContents: [ :stream | \r\t\tstream nextPutAll: \'   1 2 3 4 5 6 7 8\'; cr.\t\t\r\t\t1 to: 8 do: [ :x |\r\t\t\tstream nextPut: (Character value: x + 64); space.\r\t\t\t1 to: 8 do: [ :y |\r\t\t\t\tstream space; nextPut: (cells at: x at: y) state\r\t\t\t]. stream cr\r\t\t]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 21:14',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T21:24:18.47802-08:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcells := Array2D new: 8.\r\t1 to: 8 do: [ :x | 1 to: 8 do: [ :y | cells at: x at: y put: ReversiCell new. ] ].\r\t(cells at: 4 at: 4) placePiece: $W.\r\t(cells at: 5 at: 5) placePiece: $W.\r\t(cells at: 4 at: 5) placePiece: $B.\r\t(cells at: 5 at: 4) placePiece: $B.\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:28',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcells := Array2D new: 8.\r\t1 to: 8 do: [ :x | 1 to: 8 do: [ :y | cells at: x at: y put: ReversiCell new. ] ].\r\t(cells at: 4 at: 4) placePiece: $W.\r\t(cells at: 5 at: 5) placePiece: $W.\r\t(cells at: 4 at: 5) placePiece: $B.\r\t(cells at: 5 at: 4) placePiece: $B.\r\t(cells at: 5 at: 8) placePiece: $B.\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 21:24',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T21:27:30.310037-08:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcells := Array2D new: 8.\r\t1 to: 8 do: [ :x | 1 to: 8 do: [ :y | cells at: x at: y put: ReversiCell new. ] ].\r\t(cells at: 4 at: 4) placePiece: $W.\r\t(cells at: 5 at: 5) placePiece: $W.\r\t(cells at: 4 at: 5) placePiece: $B.\r\t(cells at: 5 at: 4) placePiece: $B.\r\t(cells at: 5 at: 8) placePiece: $B.\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 21:24',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcells := Array2D new: 8.\r\t1 to: 8 do: [ :row | 1 to: 8 do: [ :col | cells at: row at: col put: ReversiCell new. ] ].\r\t(cells at: 4 at: 4) placePiece: $W.\r\t(cells at: 5 at: 5) placePiece: $W.\r\t(cells at: 4 at: 5) placePiece: $B.\r\t(cells at: 5 at: 4) placePiece: $B.\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 21:27',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T21:27:55.167308-08:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\t^String streamContents: [ :stream | \r\t\tstream nextPutAll: \'   1 2 3 4 5 6 7 8\'; cr.\t\t\r\t\t1 to: 8 do: [ :x |\r\t\t\tstream nextPut: (Character value: x + 64); space.\r\t\t\t1 to: 8 do: [ :y |\r\t\t\t\tstream space; nextPut: (cells at: x at: y) state\r\t\t\t]. stream cr\r\t\t]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 21:14',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #boardAsString,			#protocol : #'public - string reading',			#sourceCode : 'boardAsString\r\t"Convert the game board to a printable string."\r\r\t^String streamContents: [ :stream | \r\t\tstream nextPutAll: \'   1 2 3 4 5 6 7 8\'; cr.\t\t\r\t\t1 to: 8 do: [ :row |\r\t\t\tstream nextPut: (Character value: row + 64); space.\r\t\t\t1 to: 8 do: [ :col |\r\t\t\t\tstream space; nextPut: (cells at: row at: col) state\r\t\t\t]. stream cr\r\t\t]\r\t]',			#stamp : 'CameronBierwagen 11/3/2019 21:27',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T21:30:11.453822-08:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #setCellNeighbors,			#protocol : #initalize,			#sourceCode : 'setCellNeighbors\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\tcells at: row at: col.\r\t\t\t]\r\t\t].',			#stamp : 'CameronBierwagen 11/3/2019 21:30',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T21:30:19.726487-08:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #setCellNeighbors,			#protocol : #initalize,			#sourceCode : 'setCellNeighbors\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\tcells at: row at: col.\r\t\t\t]\r\t\t].',			#stamp : 'CameronBierwagen 11/3/2019 21:30',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #setCellNeighbors,			#protocol : #initalize,			#sourceCode : 'setCellNeighbors\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\tcells at: row at: col.\r\t\t]\r\t].',			#stamp : 'CameronBierwagen 11/3/2019 21:30',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T21:32:12.544067-08:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiBoard\r\tinstanceVariableNames: \'cells\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiBoard,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiBoard					},					#name : #cells,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiBoard class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiBoard class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiBoard				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		},		#protocol : #finding/searching	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T21:54:08.268837-08:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations|\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := \r\t\r\tcol := col + 1.',			#stamp : 'CameronBierwagen 11/3/2019 21:54',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T21:58:21.623243-08:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations|\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := \r\t\r\tcol := col + 1.',			#stamp : 'CameronBierwagen 11/3/2019 21:54',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations|\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array\r\t\twith: [ col := col + 1 ] "E"\r\t\twith: [ row := row - 1 ] "NE"\r\t\twith: [ col := col - 1 ] "N"\r\t\twith: [ col := col - 1 ] "NW"\r\t\twith: [ row := row + 1 ] "W"\r\t\twith: [ row := row + 1 ] "SW"\r\t\twith: [ col := col + 1 ] "S"\r\t\twith: [ col := col + 1 ] "SE"\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 21:58',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T21:58:32.143682-08:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations|\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array\r\t\twith: [ col := col + 1 ] "E"\r\t\twith: [ row := row - 1 ] "NE"\r\t\twith: [ col := col - 1 ] "N"\r\t\twith: [ col := col - 1 ] "NW"\r\t\twith: [ row := row + 1 ] "W"\r\t\twith: [ row := row + 1 ] "SW"\r\t\twith: [ col := col + 1 ] "S"\r\t\twith: [ col := col + 1 ] "SE"\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 21:58',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations|\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array\r\t\twith: [ col := col + 1 ] "E"\r\t\twith: [ row := row - 1 ] "NE"\r\t\twith: [ col := col - 1 ] "N"\r\t\twith: [ col := col - 1 ] "NW"\r\t\twith: [ row := row + 1 ] "W"\r\t\twith: [ row := row + 1 ] "SW"\r\t\twith: [ col := col + 1 ] "S"\r\t\twith: [ col := col + 1 ]. "SE"\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 21:58',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T22:02:16.672134-08:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations|\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array\r\t\twith: [ col := col + 1 ] "E"\r\t\twith: [ row := row - 1 ] "NE"\r\t\twith: [ col := col - 1 ] "N"\r\t\twith: [ col := col - 1 ] "NW"\r\t\twith: [ row := row + 1 ] "W"\r\t\twith: [ row := row + 1 ] "SW"\r\t\twith: [ col := col + 1 ] "S"\r\t\twith: [ col := col + 1 ]. "SE"\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 21:58',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations|\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array withAll: #(\r\t[ col := col + 1 ]\r\t[ row := row - 1 ]\r\t[ col := col - 1 ]\r\t[ col := col - 1 ]\r\t[ row := row + 1 ]\r\t[ row := row + 1 ]\r\t[ col := col + 1 ]\r\t[ col := col + 1 ])\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:02',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T22:08:50.967157-08:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations|\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array withAll: #(\r\t[ col := col + 1 ]\r\t[ row := row - 1 ]\r\t[ col := col - 1 ]\r\t[ col := col - 1 ]\r\t[ row := row + 1 ]\r\t[ row := row + 1 ]\r\t[ col := col + 1 ]\r\t[ col := col + 1 ])\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:02',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations|\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array withAll: #(\r\t[ col := col + 1 ]\r\t[ row := row - 1 ]\r\t[ col := col - 1 ]\r\t[ col := col - 1 ]\r\t[ row := row + 1 ]\r\t[ row := row + 1 ]\r\t[ col := col + 1 ]\r\t[ col := col + 1 ]).\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction.\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t(row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t]\r\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:08',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T22:09:17.234924-08:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations|\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array withAll: #(\r\t[ col := col + 1 ]\r\t[ row := row - 1 ]\r\t[ col := col - 1 ]\r\t[ col := col - 1 ]\r\t[ row := row + 1 ]\r\t[ row := row + 1 ]\r\t[ col := col + 1 ]\r\t[ col := col + 1 ]).\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction.\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t(row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t]\r\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:08',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations|\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array withAll: #(\r\t[ col := col + 1 ]\r\t[ row := row - 1 ]\r\t[ col := col - 1 ]\r\t[ col := col - 1 ]\r\t[ row := row + 1 ]\r\t[ row := row + 1 ]\r\t[ col := col + 1 ]\r\t[ col := col + 1 ]).\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction.\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t(row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:09',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T22:11:54.559031-08:00' ],		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations|\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array withAll: #(\r\t[ col := col + 1 ]\r\t[ row := row - 1 ]\r\t[ col := col - 1 ]\r\t[ col := col - 1 ]\r\t[ row := row + 1 ]\r\t[ row := row + 1 ]\r\t[ col := col + 1 ]\r\t[ col := col + 1 ]).\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction.\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t(row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:09',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array withAll: #(\r\t[ col := col + 1 ]\r\t[ row := row - 1 ]\r\t[ col := col - 1 ]\r\t[ col := col - 1 ]\r\t[ row := row + 1 ]\r\t[ row := row + 1 ]\r\t[ col := col + 1 ]\r\t[ col := col + 1 ]).\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction.\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t(row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:11',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T22:17:11.581212-08:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array withAll: #(\r\t[ col := col + 1 ]\r\t[ row := row - 1 ]\r\t[ col := col - 1 ]\r\t[ col := col - 1 ]\r\t[ row := row + 1 ]\r\t[ row := row + 1 ]\r\t[ col := col + 1 ]\r\t[ col := col + 1 ]).\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction.\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t(row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:11',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array withAll: #(\r\t[ col := col + 1 ]\r\t[ row := row - 1 ]\r\t[ col := col - 1 ]\r\t[ col := col - 1 ]\r\t[ row := row + 1 ]\r\t[ row := row + 1 ]\r\t[ col := col + 1 ]\r\t[ col := col + 1 ]).\r\r\t1 to: 8 do: [ :direction |\r\t\t(operations at: direction) value: nil.\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t(row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:17',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T22:25:42.70203-08:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array withAll: #(\r\t[ col := col + 1 ]\r\t[ row := row - 1 ]\r\t[ col := col - 1 ]\r\t[ col := col - 1 ]\r\t[ row := row + 1 ]\r\t[ row := row + 1 ]\r\t[ col := col + 1 ]\r\t[ col := col + 1 ]).\r\r\t1 to: 8 do: [ :direction |\r\t\t(operations at: direction) value: nil.\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t(row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:17',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8;\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\t(operations at: direction) value: nil.\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t(row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:25',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T22:27:06.809322-08:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8;\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\t(operations at: direction) value: nil.\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t(row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:25',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\t(operations at: direction) value: nil.\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t(row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:27',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T22:27:30.633434-08:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\t(operations at: direction) value: nil.\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t(row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:27',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t End of statement list encountered ->(row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:27',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T22:27:46.44503-08:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t End of statement list encountered ->(row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:27',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction.\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t (row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:27',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T22:29:03.713722-08:00' ],		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction.\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t (row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:27',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction.\r\t\tTranscript show: row; space; column.\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t (row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:29',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-03T22:29:30.178333-08:00' ],		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction.\r\t\tTranscript show: row; space; column.\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t (row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:29',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction.\r\t\tTranscript show: row.\r\t\tTranscript show: col.\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t (row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:29',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-05T18:30:59.654478-08:00' ],		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction.\r\t\tTranscript show: row.\r\t\tTranscript show: col.\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t (row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 22:29',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ Transcript show: \'Works\' ]; "E"\r\tat: 2 put: [ Transcript show: \'Works\' ]; "NE"\r\tat: 3 put: [ Transcript show: \'Works\' ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction.\r\t\t\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t (row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/5/2019 18:30',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-05T18:32:23.708891-08:00' ],		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ Transcript show: \'Works\' ]; "E"\r\tat: 2 put: [ Transcript show: \'Works\' ]; "NE"\r\tat: 3 put: [ Transcript show: \'Works\' ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction.\r\t\t\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t (row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/5/2019 18:30',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction.\r\t\t\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t (row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^operations\r\t\r\t',			#stamp : 'CameronBierwagen 11/5/2019 18:32',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-05T18:32:40.921846-08:00' ],		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction.\r\t\t\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t (row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^operations\r\t\r\t',			#stamp : 'CameronBierwagen 11/5/2019 18:32',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction.\r\t\t\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t (row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/5/2019 18:32',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-05T18:34:39.115736-08:00' ],		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\toperations at: direction.\r\t\t\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t (row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/5/2019 18:32',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\t(operations at: direction) value.\r\t\t\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t (row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/5/2019 18:34',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-05T18:37:11.096787-08:00' ],		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'neighbors:',			#protocol : #setter,			#sourceCode : 'neighbors: anArray\r\t\t\t\r\tneighbors := anArray',			#stamp : 'CameronBierwagen 11/5/2019 18:37',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-05T18:39:34.008253-08:00' ],		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'setNeighbors:',			#protocol : #setter,			#sourceCode : 'setNeighbors: anArray\r\t\t\t\r\tneighbors := anArray',			#stamp : 'CameronBierwagen 11/5/2019 18:39',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-05T18:39:37.665274-08:00' ],		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #setCellNeighbors,			#protocol : #initalize,			#sourceCode : 'setCellNeighbors\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\tcells at: row at: col.\r\t\t]\r\t].',			#stamp : 'CameronBierwagen 11/3/2019 21:30',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #setCellNeighbors,			#protocol : #initalize,			#sourceCode : 'setCellNeighbors\r\t"For each cell, set its neighbors field to enable easy traversing."\r\t\t\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\t| cell |\r\t\t\tcell := (cells at: row at: col).\r\t\t\tcell setNeighbors: (cell findCellNeighbors: row at: col).\r\t\t]\r\t].',			#stamp : 'CameronBierwagen 11/5/2019 18:39',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-05T18:40:39.267362-08:00' ],		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcells := Array2D new: 8.\r\t1 to: 8 do: [ :row | 1 to: 8 do: [ :col | cells at: row at: col put: ReversiCell new. ] ].\r\t(cells at: 4 at: 4) placePiece: $W.\r\t(cells at: 5 at: 5) placePiece: $W.\r\t(cells at: 4 at: 5) placePiece: $B.\r\t(cells at: 5 at: 4) placePiece: $B.\r\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 21:27',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcells := Array2D new: 8.\r\t1 to: 8 do: [ :row | 1 to: 8 do: [ :col | cells at: row at: col put: ReversiCell new. ] ].\r\t(cells at: 4 at: 4) placePiece: $W.\r\t(cells at: 5 at: 5) placePiece: $W.\r\t(cells at: 4 at: 5) placePiece: $B.\r\t(cells at: 5 at: 4) placePiece: $B.\r\tself setCellNeighbors.\r\t\r\t',			#stamp : 'CameronBierwagen 11/5/2019 18:40',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T21:40:25.236723-08:00' ],		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiBoard\r\tinstanceVariableNames: \'cells\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiBoard,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiBoard					},					#name : #cells,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiBoard class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiBoard class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiBoard				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		},		#protocol : #checking	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T21:49:13.266579-08:00' ],		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #isEmpty,			#protocol : #accessor,			#sourceCode : 'isEmpty\r\t^ (state = $_)',			#stamp : 'CameronBierwagen 11/6/2019 21:49',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T21:49:41.912999-08:00' ],		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #checkForLegalMoves,			#protocol : #checking,			#sourceCode : 'checkForLegalMoves\r\t"Scan all cells until one with a legal move is found (in which case return true),\r\tor no legal moves are found (in which case return false)."\r\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\t| cell |\r\t\t\tcell := (cells at: row at: col).\r\t\t\tcell  setNeighbors: (cell findCellNeighbors: row at: col).\r\t\t]\r\t].\r\t\r\t^ false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/6/2019 21:49',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T21:51:03.154008-08:00' ],		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #checkForLegalMoves,			#protocol : #checking,			#sourceCode : 'checkForLegalMoves\r\t"Scan all cells until one with a legal move is found (in which case return true),\r\tor no legal moves are found (in which case return false)."\r\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\t| cell |\r\t\t\tcell := (cells at: row at: col).\r\t\t\tcell  setNeighbors: (cell findCellNeighbors: row at: col).\r\t\t]\r\t].\r\t\r\t^ false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/6/2019 21:49',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #checkForLegalMoves,			#protocol : #checking,			#sourceCode : 'checkForLegalMoves\r\t"Scan all cells until one with a legal move is found (in which case return true),\r\tor no legal moves are found (in which case return false)."\r\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\t| cell |\r\t\t\tcell := (cells at: row at: col).\r\t\t\tcell isEmpty ifTrue: [\r\t\t\t\tcell checkForLegalMoves ifTrue: [^ true]\r\t\t\t]\r\t\t]\r\t].\r\t\r\t^ false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/6/2019 21:51',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T21:52:01.370785-08:00' ],		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #checkForLegalMovesBlack,			#protocol : #checking,			#sourceCode : 'checkForLegalMovesBlack\r\t"Scan all cells until one with a legal move is found (in which case return true),\r\tor no legal moves are found (in which case return false)."\r\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\t| cell |\r\t\t\tcell := (cells at: row at: col).\r\t\t\tcell isEmpty ifTrue: [\r\t\t\t\tcell checkForLegalMovesBlack ifTrue: [^ true]\r\t\t\t]\r\t\t]\r\t].\r\t\r\t^ false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/6/2019 21:52',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T21:52:19.170949-08:00' ],		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #checkForLegalMovesWhite,			#protocol : #checking,			#sourceCode : 'checkForLegalMovesWhite\r\t"Scan all cells until one with a legal move is found (in which case return true),\r\tor no legal moves are found (in which case return false)."\r\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\t| cell |\r\t\t\tcell := (cells at: row at: col).\r\t\t\tcell isEmpty ifTrue: [\r\t\t\t\tcell checkForLegalMovesWhite ifTrue: [^ true]\r\t\t\t]\r\t\t]\r\t].\r\t\r\t^ false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/6/2019 21:52',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T21:52:26.499025-08:00' ],		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #checkForLegalMoves,			#protocol : #checking,			#sourceCode : 'checkForLegalMoves\r\t"Scan all cells until one with a legal move is found (in which case return true),\r\tor no legal moves are found (in which case return false)."\r\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\t| cell |\r\t\t\tcell := (cells at: row at: col).\r\t\t\tcell isEmpty ifTrue: [\r\t\t\t\tcell checkForLegalMoves ifTrue: [^ true]\r\t\t\t]\r\t\t]\r\t].\r\t\r\t^ false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/6/2019 21:51',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #checkForLegalMoves,			#protocol : #'as yet unclassified',			#sourceCode : 'checkForLegalMoves\r\t"Scan all cells until one with a legal move is found (in which case return true),\r\tor no legal moves are found (in which case return false)."\r\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\t| cell |\r\t\t\tcell := (cells at: row at: col).\r\t\t\tcell isEmpty ifTrue: [\r\t\t\t\tcell checkForLegalMoves ifTrue: [^ true]\r\t\t\t]\r\t\t]\r\t].\r\t\r\t^ false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/6/2019 21:51',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T21:52:26.502509-08:00' ],		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #checkForLegalMoves,			#protocol : #checking,			#sourceCode : 'checkForLegalMoves\r\t"Scan all cells until one with a legal move is found (in which case return true),\r\tor no legal moves are found (in which case return false)."\r\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\t| cell |\r\t\t\tcell := (cells at: row at: col).\r\t\t\tcell isEmpty ifTrue: [\r\t\t\t\tcell checkForLegalMoves ifTrue: [^ true]\r\t\t\t]\r\t\t]\r\t].\r\t\r\t^ false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/6/2019 21:51',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T21:52:40.958792-08:00' ],		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiCell\r\tinstanceVariableNames: \'neighbors state\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiCell,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiCell					},					#name : #neighbors,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiCell					},					#name : #state,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiCell class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiCell class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiCell				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		},		#protocol : #checking	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T21:58:22.254514-08:00' ],		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #checkForLegalMovesBlack,			#protocol : #checking,			#sourceCode : 'checkForLegalMovesBlack\r\tneighbors notNil: [ \r\t\r\t]',			#stamp : 'CameronBierwagen 11/6/2019 21:58',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T21:58:50.500655-08:00' ],		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #checkForLegalMovesBlack,			#protocol : #checking,			#sourceCode : 'checkForLegalMovesBlack\r\tneighbors notNil: [ \r\t\r\t]',			#stamp : 'CameronBierwagen 11/6/2019 21:58',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #checkForLegalMovesBlack,			#protocol : #checking,			#sourceCode : 'checkForLegalMovesBlack\r\tneighbors ifNotNil: [ \r\t\r\t]',			#stamp : 'CameronBierwagen 11/6/2019 21:58',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T22:13:27.516463-08:00' ],		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #checkForLegalMovesBlack,			#protocol : #checking,			#sourceCode : 'checkForLegalMovesBlack\r\tneighbors ifNotNil: [ \r\t\r\t]',			#stamp : 'CameronBierwagen 11/6/2019 21:58',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #checkForLegalMovesBlack,			#protocol : #checking,			#sourceCode : 'checkForLegalMovesBlack\r\tneighbors ifNotNil: [\r\t\t| neighbor |\r\t\t1 to: 8 do: [ :index |\r\t\t\tneighbor := neighbors \r\t\t]\r\t].\r^ false',			#stamp : 'CameronBierwagen 11/6/2019 22:13',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T22:13:41.560595-08:00' ],		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #checkForLegalMovesBlack,			#protocol : #checking,			#sourceCode : 'checkForLegalMovesBlack\r\tneighbors ifNotNil: [\r\t\t| neighbor |\r\t\t1 to: 8 do: [ :index |\r\t\t\tneighbor := neighbors \r\t\t]\r\t].\r^ false',			#stamp : 'CameronBierwagen 11/6/2019 22:13',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #checkForLegalMovesBlack,			#protocol : #checking,			#sourceCode : 'checkForLegalMovesBlack\r\tneighbors ifNotNil: [\r\t\t| neighbor |\r\t\t1 to: 8 do: [ :index |\r\t\t\tneighbor := neighbors at: index.\r\t\t]\r\t].\r^ false',			#stamp : 'CameronBierwagen 11/6/2019 22:13',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T22:28:06.546421-08:00' ],		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'neighborAtDirection:',			#protocol : #accessor,			#sourceCode : 'neighborAtDirection: direction\r\t^ neighbors at: direction',			#stamp : 'CameronBierwagen 11/6/2019 22:28',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T22:30:56.357317-08:00' ],		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'checkForLegalMoveBlackInDirection:',			#protocol : #checking,			#sourceCode : 'checkForLegalMoveBlackInDirection: direction\r\t| neighbor nState|\r\tneighbor := neighbors at: direction.\r\t\r\t(neighbor state = $W) ifTrue: [ "The first one must be the opposite color for this to be a legal move."\r\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t[ neighbor state = $W ] whileTrue: [ \r\t\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t].\r\t\t^ (neighbor state = $B)\r\t].\r\t\r\t^ false',			#stamp : 'CameronBierwagen 11/6/2019 22:30',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T22:31:05.134504-08:00' ],		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'checkForLegalMoveBlackInDirection:',			#protocol : #checking,			#sourceCode : 'checkForLegalMoveBlackInDirection: direction\r\t| neighbor nState|\r\tneighbor := neighbors at: direction.\r\t\r\t(neighbor state = $W) ifTrue: [ "The first one must be the opposite color for this to be a legal move."\r\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t[ neighbor state = $W ] whileTrue: [ \r\t\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t].\r\t\t^ (neighbor state = $B)\r\t].\r\t\r\t^ false',			#stamp : 'CameronBierwagen 11/6/2019 22:30',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'checkForLegalMoveBlackInDirection:',			#protocol : #checking,			#sourceCode : 'checkForLegalMoveBlackInDirection: direction\r\t| neighbor|\r\tneighbor := neighbors at: direction.\r\t\r\t(neighbor state = $W) ifTrue: [ "The first one must be the opposite color for this to be a legal move."\r\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t[ neighbor state = $W ] whileTrue: [ \r\t\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t].\r\t\t^ (neighbor state = $B)\r\t].\r\t\r\t^ false',			#stamp : 'CameronBierwagen 11/6/2019 22:31',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T22:33:55.496216-08:00' ],		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #checkForLegalMovesBlack,			#protocol : #checking,			#sourceCode : 'checkForLegalMovesBlack\r\tneighbors ifNotNil: [\r\t\t| neighbor |\r\t\t1 to: 8 do: [ :index |\r\t\t\tneighbor := neighbors at: index.\r\t\t]\r\t].\r^ false',			#stamp : 'CameronBierwagen 11/6/2019 22:13',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #checkForLegalMovesBlack,			#protocol : #checking,			#sourceCode : 'checkForLegalMovesBlack\r\t1 to: 8 do: [ :index |\r\t\t(self checkForLegalMoveBlackInDirection: index) ifTrue: [ ^ true ].\r\t].\r^ false',			#stamp : 'CameronBierwagen 11/6/2019 22:33',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T22:35:52.625854-08:00' ],		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #checkForLegalMovesWhite,			#protocol : #'as yet unclassified',			#sourceCode : 'checkForLegalMovesWhite\r\t1 to: 8 do: [ :index |\r\t\t(self checkForLegalMoveWhiteInDirection: index) ifTrue: [ ^ true ].\r\t].\r^ false',			#stamp : 'CameronBierwagen 11/6/2019 22:35',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T22:35:52.64215-08:00' ],		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #checkForLegalMovesWhite,			#protocol : #'as yet unclassified',			#sourceCode : 'checkForLegalMovesWhite\r\t1 to: 8 do: [ :index |\r\t\t(self checkForLegalMoveWhiteInDirection: index) ifTrue: [ ^ true ].\r\t].\r^ false',			#stamp : 'CameronBierwagen 11/6/2019 22:35',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #checkForLegalMovesWhite,			#protocol : #checking,			#sourceCode : 'checkForLegalMovesWhite\r\t1 to: 8 do: [ :index |\r\t\t(self checkForLegalMoveWhiteInDirection: index) ifTrue: [ ^ true ].\r\t].\r^ false',			#stamp : 'CameronBierwagen 11/6/2019 22:35',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T22:36:26.985145-08:00' ],		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'checkForLegalMoveWhiteInDirection:',			#protocol : #'as yet unclassified',			#sourceCode : 'checkForLegalMoveWhiteInDirection: direction\r\t| neighbor|\r\tneighbor := neighbors at: direction.\r\t\r\t(neighbor state = $B) ifTrue: [ "The first one must be the opposite color for this to be a legal move."\r\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t[ neighbor state = $B ] whileTrue: [ \r\t\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t].\r\t\t^ (neighbor state = $W)\r\t].\r\t\r\t^ false',			#stamp : 'CameronBierwagen 11/6/2019 22:36',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T22:36:39.098127-08:00' ],		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'checkForLegalMoveWhiteInDirection:',			#protocol : #'as yet unclassified',			#sourceCode : 'checkForLegalMoveWhiteInDirection: direction\r\t| neighbor|\r\tneighbor := neighbors at: direction.\r\t\r\t(neighbor state = $B) ifTrue: [ "The first one must be the opposite color for this to be a legal move."\r\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t[ neighbor state = $B ] whileTrue: [ \r\t\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t].\r\t\t^ (neighbor state = $W)\r\t].\r\t\r\t^ false',			#stamp : 'CameronBierwagen 11/6/2019 22:36',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'checkForLegalMoveWhiteInDirection:',			#protocol : #accessor,			#sourceCode : 'checkForLegalMoveWhiteInDirection: direction\r\t| neighbor|\r\tneighbor := neighbors at: direction.\r\t\r\t(neighbor state = $B) ifTrue: [ "The first one must be the opposite color for this to be a legal move."\r\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t[ neighbor state = $B ] whileTrue: [ \r\t\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t].\r\t\t^ (neighbor state = $W)\r\t].\r\t\r\t^ false',			#stamp : 'CameronBierwagen 11/6/2019 22:36',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-06T22:37:32.153073-08:00' ],		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'checkForLegalMoveWhiteInDirection:',			#protocol : #accessor,			#sourceCode : 'checkForLegalMoveWhiteInDirection: direction\r\t| neighbor|\r\tneighbor := neighbors at: direction.\r\t\r\t(neighbor state = $B) ifTrue: [ "The first one must be the opposite color for this to be a legal move."\r\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t[ neighbor state = $B ] whileTrue: [ \r\t\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t].\r\t\t^ (neighbor state = $W)\r\t].\r\t\r\t^ false',			#stamp : 'CameronBierwagen 11/6/2019 22:36',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'checkForLegalMoveWhiteInDirection:',			#protocol : #checking,			#sourceCode : 'checkForLegalMoveWhiteInDirection: direction\r\t| neighbor|\r\tneighbor := neighbors at: direction.\r\t\r\t(neighbor state = $B) ifTrue: [ "The first one must be the opposite color for this to be a legal move."\r\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t[ neighbor state = $B ] whileTrue: [ \r\t\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t].\r\t\t^ (neighbor state = $W)\r\t].\r\t\r\t^ false',			#stamp : 'CameronBierwagen 11/6/2019 22:36',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T16:16:45.139093-08:00' ],		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiCell\r\tinstanceVariableNames: \'neighbors state\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiCell,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiCell					},					#name : #neighbors,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiCell					},					#name : #state,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiCell class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiCell class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiCell				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		},		#protocol : #putting	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T16:18:40.858511-08:00' ],		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeWhite,			#protocol : #putting,			#sourceCode : 'placeWhite\t\t\t\r\t| neighborsAffected |\r\tneighborsAffected := 0.\r\t',			#stamp : 'CameronBierwagen 11/7/2019 16:18',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T16:19:21.873046-08:00' ],		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiCell\r\tinstanceVariableNames: \'neighbors state\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiCell,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiCell					},					#name : #neighbors,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiCell					},					#name : #state,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiCell class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiCell class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiCell				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		},		#protocol : #'changing state'	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T16:28:07.114195-08:00' ],		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeWhiteInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeWhiteInDirection: direction\r\t"Recursively attempts to flip over a line of black pieces terminated by a white piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $W) ifTrue: [\r\t\t(nextPiece makeWhiteInDirection: direction)\r\t\t\r\t] ',			#stamp : 'CameronBierwagen 11/7/2019 16:28',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T16:29:22.22034-08:00' ],		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'setState:',			#protocol : #'changing state',			#sourceCode : 'setState: newState\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tstate := newState',			#stamp : 'CameronBierwagen 11/7/2019 16:29',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T16:29:26.10689-08:00' ],		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'setState:',			#protocol : #'changing state',			#sourceCode : 'setState: newState\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tstate := newState',			#stamp : 'CameronBierwagen 11/7/2019 16:29',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'setState:',			#protocol : #'changing state',			#sourceCode : 'setState: newState\r\t\t\t\r\tstate := newState',			#stamp : 'CameronBierwagen 11/7/2019 16:29',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T16:29:37.156415-08:00' ],		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'state:',			#protocol : #'changing state',			#sourceCode : 'state: newState\r\t\t\t\r\tstate := newState',			#stamp : 'CameronBierwagen 11/7/2019 16:29',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T16:35:00.545511-08:00' ],		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeWhiteInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeWhiteInDirection: direction\r\t"Recursively attempts to flip over a line of black pieces terminated by a white piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $W) ifTrue: [\r\t\t(nextPiece makeWhiteInDirection: direction)\r\t\t\r\t] ',			#stamp : 'CameronBierwagen 11/7/2019 16:28',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeWhiteInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeWhiteInDirection: direction\r\t"Recursively attempts to flip over a line of black pieces terminated by a white piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $B) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\t\tstate := $W\r\t\t]\r\t\t\r\t] ',			#stamp : 'CameronBierwagen 11/7/2019 16:35',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T16:35:31.556432-08:00' ],		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeWhiteInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeWhiteInDirection: direction\r\t"Recursively attempts to flip over a line of black pieces terminated by a white piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $B) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\t\tstate := $W\r\t\t]\r\t\t\r\t] ',			#stamp : 'CameronBierwagen 11/7/2019 16:35',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeWhiteInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeWhiteInDirection: direction\r\t"Recursively attempts to flip over a line of black pieces terminated by a white piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $B) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\t\tstate := $W.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t]\r\t\t\r\t] ',			#stamp : 'CameronBierwagen 11/7/2019 16:35',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T16:38:26.447532-08:00' ],		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeWhiteInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeWhiteInDirection: direction\r\t"Recursively attempts to flip over a line of black pieces terminated by a white piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $B) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\t\tstate := $W.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t]\r\t\t\r\t] ',			#stamp : 'CameronBierwagen 11/7/2019 16:35',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeWhiteInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeWhiteInDirection: direction\r\t"Recursively attempts to flip over a line of black pieces terminated by a white piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $B) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\t\tstate := $W.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t^(nextPiece state = $W)',			#stamp : 'CameronBierwagen 11/7/2019 16:38',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T16:40:06.800312-08:00' ],		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeBlackInDirection:',			#protocol : #'as yet unclassified',			#sourceCode : 'makeBlackInDirection: direction\r\t"Recursively attempts to flip over a line of white pieces terminated by a black piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $W) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\t\tstate := $B.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t^(nextPiece state = $B)',			#stamp : 'CameronBierwagen 11/7/2019 16:40',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T16:40:12.642665-08:00' ],		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeBlackInDirection:',			#protocol : #'as yet unclassified',			#sourceCode : 'makeBlackInDirection: direction\r\t"Recursively attempts to flip over a line of white pieces terminated by a black piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $W) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\t\tstate := $B.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t^(nextPiece state = $B)',			#stamp : 'CameronBierwagen 11/7/2019 16:40',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeBlackInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeBlackInDirection: direction\r\t"Recursively attempts to flip over a line of white pieces terminated by a black piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $W) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\t\tstate := $B.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t^(nextPiece state = $B)',			#stamp : 'CameronBierwagen 11/7/2019 16:40',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T16:40:50.074017-08:00' ],		#prior : OmReference [ '103' ],		#self : OmReference [ '104' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #setter,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:23',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #'changing state',			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:23',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T16:41:25.70931-08:00' ],		#prior : OmReference [ '104' ],		#self : OmReference [ '105' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #'changing state',			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_) ifTrue: [ state := pieceType. ^true ].\r\t^false\r\t\t\t\r\t',			#stamp : 'CameronBierwagen 11/3/2019 20:23',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #'changing state',			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_) ifTrue: [ state := pieceType. ^true ].\r\t^false',			#stamp : 'CameronBierwagen 11/7/2019 16:41',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T16:43:44.312388-08:00' ],		#prior : OmReference [ '105' ],		#self : OmReference [ '106' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'state:',			#protocol : #'changing state',			#sourceCode : 'state: newState\r\t\t\t\r\tstate := newState',			#stamp : 'CameronBierwagen 11/7/2019 16:29',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'state:',			#protocol : #'as yet unclassified',			#sourceCode : 'state: newState\r\t\t\t\r\tstate := newState',			#stamp : 'CameronBierwagen 11/7/2019 16:29',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T16:43:44.364042-08:00' ],		#prior : OmReference [ '106' ],		#self : OmReference [ '107' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'state:',			#protocol : #'changing state',			#sourceCode : 'state: newState\r\t\t\t\r\tstate := newState',			#stamp : 'CameronBierwagen 11/7/2019 16:29',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T16:44:39.350123-08:00' ],		#prior : OmReference [ '107' ],		#self : OmReference [ '108' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcells := Array2D new: 8.\r\t1 to: 8 do: [ :row | 1 to: 8 do: [ :col | cells at: row at: col put: ReversiCell new. ] ].\r\t(cells at: 4 at: 4) placePiece: $W.\r\t(cells at: 5 at: 5) placePiece: $W.\r\t(cells at: 4 at: 5) placePiece: $B.\r\t(cells at: 5 at: 4) placePiece: $B.\r\tself setCellNeighbors.\r\t\r\t',			#stamp : 'CameronBierwagen 11/5/2019 18:40',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcells := Array2D new: 8.\r\t1 to: 8 do: [ :row | 1 to: 8 do: [ :col | cells at: row at: col put: ReversiCell new. ] ].\r\t(cells at: 4 at: 4) setState: $W.\r\t(cells at: 5 at: 5) setState: $W.\r\t(cells at: 4 at: 5) setState: $B.\r\t(cells at: 5 at: 4) setState: $B.\r\tself setCellNeighbors.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 16:44',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T16:49:31.878878-08:00' ],		#prior : OmReference [ '108' ],		#self : OmReference [ '109' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'setState:',			#protocol : #'changing state',			#sourceCode : 'setState: newState\r\t\t\t\r\tstate := newState',			#stamp : 'CameronBierwagen 11/7/2019 16:29',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'setState:',			#protocol : #setter,			#sourceCode : 'setState: newState\r\t\t\t\r\tstate := newState',			#stamp : 'CameronBierwagen 11/7/2019 16:29',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T18:41:08.956306-08:00' ],		#prior : OmReference [ '109' ],		#self : OmReference [ '110' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #'changing state',			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_) ifTrue: [ state := pieceType. ^true ].\r\t^false',			#stamp : 'CameronBierwagen 11/7/2019 16:41',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #putting,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_) ifTrue: [ state := pieceType. ^true ].\r\t^false',			#stamp : 'CameronBierwagen 11/7/2019 16:41',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T18:41:20.757253-08:00' ],		#prior : OmReference [ '110' ],		#self : OmReference [ '111' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'setState:',			#protocol : #setter,			#sourceCode : 'setState: newState\r\t\t\t\r\tstate := newState',			#stamp : 'CameronBierwagen 11/7/2019 16:29',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'setState:',			#protocol : #'changing state',			#sourceCode : 'setState: newState\r\t\t\t\r\tstate := newState',			#stamp : 'CameronBierwagen 11/7/2019 16:29',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T18:43:04.886198-08:00' ],		#prior : OmReference [ '111' ],		#self : OmReference [ '112' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeWhite,			#protocol : #putting,			#sourceCode : 'placeWhite\t\t\t\r\t| neighborsAffected |\r\tneighborsAffected := 0.\r\t',			#stamp : 'CameronBierwagen 11/7/2019 16:18',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeWhite,			#protocol : #'as yet unclassified',			#sourceCode : 'placeWhite\t\t\t\r\t| neighborsAffected |\r\tneighborsAffected := 0.\r\t',			#stamp : 'CameronBierwagen 11/7/2019 16:18',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T18:43:04.889816-08:00' ],		#prior : OmReference [ '112' ],		#self : OmReference [ '113' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeWhite,			#protocol : #putting,			#sourceCode : 'placeWhite\t\t\t\r\t| neighborsAffected |\r\tneighborsAffected := 0.\r\t',			#stamp : 'CameronBierwagen 11/7/2019 16:18',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T18:48:23.463752-08:00' ],		#prior : OmReference [ '113' ],		#self : OmReference [ '114' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeWhite,			#protocol : #putting,			#sourceCode : 'placeWhite\r\t',			#stamp : 'CameronBierwagen 11/7/2019 18:48',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T18:49:51.799581-08:00' ],		#prior : OmReference [ '114' ],		#self : OmReference [ '115' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeWhite,			#protocol : #putting,			#sourceCode : 'placeWhite\r\t',			#stamp : 'CameronBierwagen 11/7/2019 18:48',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeWhite,			#protocol : #putting,			#sourceCode : 'placeWhite\t\t\t\r\r\t| success |\r\tsuccess := false.\r\t(state = $_) ifTrue: [ \r\t\t1 to: 8 do: [ :direction |\r\t\t\tsuccess := (self makeWhiteInDirection: direction) or: success.\r\t\t]\r\t].\r\t^success',			#stamp : 'CameronBierwagen 11/7/2019 18:49',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T18:51:48.852331-08:00' ],		#prior : OmReference [ '115' ],		#self : OmReference [ '116' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #putting,			#sourceCode : 'placePiece: pieceType\r\t"Place a white or black piece if the cell is empty. Returns true if successful."\r\t(state = $_) ifTrue: [ state := pieceType. ^true ].\r\t^false',			#stamp : 'CameronBierwagen 11/7/2019 16:41',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'placePiece:',			#protocol : #putting,			#sourceCode : 'placePiece: pieceColor\r\t"Attempt to place a white or black piece if the cell is empty.\r\tReturns true if successful.\r\tReturns false if no legal moves exist in the desired space, or if the supplied color is invalid."\r\t\r\t(pieceColor = $W) ifTrue: [ ^ self placeWhite ].\r\t(pieceColor = $B) ifTrue: [ ^ self placeBlack ].\r\t^ false',			#stamp : 'CameronBierwagen 11/7/2019 18:51',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T18:52:14.351316-08:00' ],		#prior : OmReference [ '116' ],		#self : OmReference [ '117' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeBlack,			#protocol : #putting,			#sourceCode : 'placeBlack\t\t\t\r\r\t| success |\r\tsuccess := false.\r\t(state = $_) ifTrue: [ \r\t\t1 to: 8 do: [ :direction |\r\t\t\tsuccess := (self makeBlackInDirection: direction) or: success.\r\t\t]\r\t].\r\t^success',			#stamp : 'CameronBierwagen 11/7/2019 18:52',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T18:53:35.132156-08:00' ],		#prior : OmReference [ '117' ],		#self : OmReference [ '118' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeBlack,			#protocol : #putting,			#sourceCode : 'placeBlack\t\t\t\r\r\t| success |\r\tsuccess := false.\r\t(state = $_) ifTrue: [ \r\t\t1 to: 8 do: [ :direction |\r\t\t\tsuccess := (self makeBlackInDirection: direction) or: success.\r\t\t]\r\t].\r\t^success',			#stamp : 'CameronBierwagen 11/7/2019 18:52',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeBlack,			#protocol : #putting,			#sourceCode : 'placeBlack\t\t\t\r\r\t| success |\r\tsuccess := false.\r\t(state = $_) ifTrue: [ \r\t\t1 to: 8 do: [ :direction |\r\t\t\tsuccess := (self makeBlackInDirection: direction) or: success.\r\t\t]\r\t].\r\tsuccess ifTrue: [ state := $B ].\r\t^success',			#stamp : 'CameronBierwagen 11/7/2019 18:53',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T18:53:54.491741-08:00' ],		#prior : OmReference [ '118' ],		#self : OmReference [ '119' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeWhite,			#protocol : #putting,			#sourceCode : 'placeWhite\t\t\t\r\r\t| success |\r\tsuccess := false.\r\t(state = $_) ifTrue: [ \r\t\t1 to: 8 do: [ :direction |\r\t\t\tsuccess := (self makeWhiteInDirection: direction) or: success.\r\t\t]\r\t].\r\t^success',			#stamp : 'CameronBierwagen 11/7/2019 18:49',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeWhite,			#protocol : #putting,			#sourceCode : 'placeWhite\t\t\t\r\r\t| success |\r\tsuccess := false.\r\t(state = $_) ifTrue: [ \r\t\t1 to: 8 do: [ :direction |\r\t\t\tsuccess := (self makeWhiteInDirection: direction) or: success.\r\t\t]\r\t].\r\tsuccess ifTrue: [ state := $W ].\r\t^success',			#stamp : 'CameronBierwagen 11/7/2019 18:53',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T18:55:25.697854-08:00' ],		#prior : OmReference [ '119' ],		#self : OmReference [ '120' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiGame\r\tinstanceVariableNames: \'board turn state bScore wScore legalMoves\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiGame,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #board,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #turn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #state,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #bScore,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #wScore,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #legalMoves,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiGame class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiGame class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiGame				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiGame\r\tinstanceVariableNames: \'board turn state\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiGame,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #board,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #turn,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #state,					#parent : @33				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiGame class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiGame class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @33			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiGame				},				#parent : @33,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T18:55:35.144337-08:00' ],		#prior : OmReference [ '120' ],		#self : OmReference [ '121' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiGame\r\tinstanceVariableNames: \'board turn state\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiGame,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #board,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #turn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #state,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiGame class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiGame class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiGame				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiGame\r\tinstanceVariableNames: \'board turn active\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiGame,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #board,					#parent : @27				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #turn,					#parent : @27				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #active,					#parent : @27				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiGame class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiGame class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @27			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiGame				},				#parent : @27,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T18:56:50.063305-08:00' ],		#prior : OmReference [ '121' ],		#self : OmReference [ '122' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tboard := ReversiBoard new.',			#stamp : 'CameronBierwagen 11/3/2019 19:55',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tboard := ReversiBoard new.\r\tactive := true.\r\tturn := $B.',			#stamp : 'CameronBierwagen 11/7/2019 18:56',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T18:57:44.086784-08:00' ],		#prior : OmReference [ '122' ],		#self : OmReference [ '123' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiGame\r\tinstanceVariableNames: \'board turn active\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiGame,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #board,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #turn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #active,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiGame class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiGame class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiGame				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiGame\r\tinstanceVariableNames: \'board turn\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiGame,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #board,					#parent : @27				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #turn,					#parent : @27				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiGame class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiGame class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @27			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiGame				},				#parent : @27,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T18:57:56.012587-08:00' ],		#prior : OmReference [ '123' ],		#self : OmReference [ '124' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tboard := ReversiBoard new.\r\tactive := true.\r\tturn := $B.',			#stamp : 'CameronBierwagen 11/7/2019 18:56',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tboard := ReversiBoard new.\r\tturn := $B.',			#stamp : 'CameronBierwagen 11/7/2019 18:57',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T18:58:39.92089-08:00' ],		#prior : OmReference [ '124' ],		#self : OmReference [ '125' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tstate := $_.\r\tneighbors := Array new: 8.',			#stamp : 'CameronBierwagen 11/3/2019 19:55',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tstate := $_.',			#stamp : 'CameronBierwagen 11/7/2019 18:58',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T18:59:01.66971-08:00' ],		#prior : OmReference [ '125' ],		#self : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tboard := ReversiBoard new.\r\tturn := $B.',			#stamp : 'CameronBierwagen 11/7/2019 18:57',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tsuper initialize.\r\tboard := ReversiBoard new.\r\tturn := $B.',			#stamp : 'CameronBierwagen 11/7/2019 18:59',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T19:01:11.34422-08:00' ],		#prior : OmReference [ '126' ],		#self : OmReference [ '127' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #setCellNeighbors,			#protocol : #initalize,			#sourceCode : 'setCellNeighbors\r\t"For each cell, set its neighbors field to enable easy traversing."\r\t\t\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\t| cell |\r\t\t\tcell := (cells at: row at: col).\r\t\t\tcell setNeighbors: (cell findCellNeighbors: row at: col).\r\t\t]\r\t].',			#stamp : 'CameronBierwagen 11/5/2019 18:39',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #setCellNeighbors,			#protocol : #initalize,			#sourceCode : 'setCellNeighbors\r\t"For each cell, set its neighbors field to enable easy traversing."\r\t\t\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\t| cell |\r\t\t\tcell := (cells at: row at: col).\r\t\t\tcell setNeighbors: (self findCellNeighbors: row at: col).\r\t\t]\r\t].',			#stamp : 'CameronBierwagen 11/7/2019 19:01',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T19:02:48.94973-08:00' ],		#prior : OmReference [ '127' ],		#self : OmReference [ '128' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\t(operations at: direction) value.\r\t\t\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t (row > 0 & row < 9 & col > 0 & col < 9) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/5/2019 18:34',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\t(operations at: direction) value.\r\t\t\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t ((row > 0) and: [(row < 9) and: [col > 0]]  and: [col < 9]) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 19:02',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T19:04:08.183212-08:00' ],		#prior : OmReference [ '128' ],		#self : OmReference [ '129' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\t(operations at: direction) value.\r\t\t\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t ((row > 0) and: [(row < 9) and: [col > 0]]  and: [col < 9]) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 19:02',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\t(operations at: direction) value.\r\t\t\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t ((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 19:04',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T19:04:45.471676-08:00' ],		#prior : OmReference [ '129' ],		#self : OmReference [ '130' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\t(operations at: direction) value.\r\t\t\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t ((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 19:04',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'findCellNeighbors:at:',			#protocol : #finding/searching,			#sourceCode : 'findCellNeighbors: rowNumber at: columnNumber\r\t"Get the neighbors of a cell so that the information can then be stored in the cell itself."\r\t\r\t| row col neighbors operations |\r\trow := rowNumber.\r\tcol := columnNumber.\r\tneighbors := Array new: 8.\r\t\r\t"This use of blocks might be kind of hacky, but I think it\'s cool. Start to the east and move around counter-clockwise."\r\toperations := Array new: 8.\r\toperations\r\tat: 1 put: [ col := col + 1 ]; "E"\r\tat: 2 put: [ row := row - 1 ]; "NE"\r\tat: 3 put: [ col := col - 1 ]; "N"\r\tat: 4 put: [ col := col - 1 ]; "NW"\r\tat: 5 put: [ row := row + 1 ]; "W"\r\tat: 6 put: [ row := row + 1 ]; "SW"\r\tat: 7 put: [ col := col + 1 ]; "S"\r\tat: 8 put: [ col := col + 1 ]. "SE"\r\r\t1 to: 8 do: [ :direction |\r\t\t(operations at: direction) value.\r\t\t\r\t\t"If we fall outside of these bounds, the neighbor will be nil."\r\t\t ((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tneighbors at: direction put: (cells at: row at: col)\r\t\t]\r\t\t\r\t].\r\r^neighbors\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 19:04',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T19:15:10.697702-08:00' ],		#prior : OmReference [ '130' ],		#self : OmReference [ '131' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiBoard\r\tinstanceVariableNames: \'cells\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiBoard,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiBoard					},					#name : #cells,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiBoard class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiBoard class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiBoard				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		},		#protocol : #accessing	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T19:15:58.427086-08:00' ],		#prior : OmReference [ '131' ],		#self : OmReference [ '132' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'getCellAt:at:',			#protocol : #accessing,			#sourceCode : 'getCellAt: row at: col\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^ cells at: row at: col',			#stamp : 'CameronBierwagen 11/7/2019 19:15',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T19:16:17.242534-08:00' ],		#prior : OmReference [ '132' ],		#self : OmReference [ '133' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'getCellAt:at:',			#protocol : #accessing,			#sourceCode : 'getCellAt: row at: col\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^ cells at: row at: col',			#stamp : 'CameronBierwagen 11/7/2019 19:15',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'getCellAt:at:',			#protocol : #accessing,			#sourceCode : 'getCellAt: row at: col\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^ (cells at: row at: col)',			#stamp : 'CameronBierwagen 11/7/2019 19:16',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T19:24:12.458105-08:00' ],		#prior : OmReference [ '133' ],		#self : OmReference [ '134' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeBlackInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeBlackInDirection: direction\r\t"Recursively attempts to flip over a line of white pieces terminated by a black piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $W) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\t\tstate := $B.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t^(nextPiece state = $B)',			#stamp : 'CameronBierwagen 11/7/2019 16:40',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeBlackInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeBlackInDirection: direction\r\t"Recursively attempts to flip over a line of white pieces terminated by a black piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $W) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeBlackInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\t\tstate := $B.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t^(nextPiece state = $B)',			#stamp : 'CameronBierwagen 11/7/2019 19:24',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T19:26:03.198583-08:00' ],		#prior : OmReference [ '134' ],		#self : OmReference [ '135' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeBlack,			#protocol : #putting,			#sourceCode : 'placeBlack\t\t\t\r\r\t| success |\r\tsuccess := false.\r\t(state = $_) ifTrue: [ \r\t\t1 to: 8 do: [ :direction |\r\t\t\tsuccess := (self makeBlackInDirection: direction) or: success.\r\t\t]\r\t].\r\tsuccess ifTrue: [ state := $B ].\r\t^success',			#stamp : 'CameronBierwagen 11/7/2019 18:53',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeBlack,			#protocol : #putting,			#sourceCode : 'placeBlack\t\t\t\r\r\t| success |\r\tsuccess := false.\r\t(state = $_) ifTrue: [ \r\t\t1 to: 8 do: [ :direction |\r\t\t\tsuccess := (self makeBlackInDirection: direction) or: success.\r\t\t]\r\t].\r\tsuccess ifTrue: [ self setState: $B ].\r\t^success',			#stamp : 'CameronBierwagen 11/7/2019 19:26',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T19:32:43.307351-08:00' ],		#prior : OmReference [ '135' ],		#self : OmReference [ '136' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeBlack,			#protocol : #putting,			#sourceCode : 'placeBlack\t\t\t\r\r\t| success |\r\tsuccess := false.\r\t(state = $_) ifTrue: [ \r\t\t1 to: 8 do: [ :direction |\r\t\t\tsuccess := (self makeBlackInDirection: direction) or: success.\r\t\t]\r\t].\r\tsuccess ifTrue: [ self setState: $B ].\r\t^success',			#stamp : 'CameronBierwagen 11/7/2019 19:26',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeBlack,			#protocol : #putting,			#sourceCode : 'placeBlack\t\t\t\r\r\t| success |\r\tsuccess := false.\r\t(state = $_) ifTrue: [ \r\t\t1 to: 8 do: [ :direction |\r\t\t\tsuccess := (self makeBlackInDirection: direction) or: success.\r\t\t]\r\t].\r\t^success',			#stamp : 'CameronBierwagen 11/7/2019 19:32',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T19:33:25.069368-08:00' ],		#prior : OmReference [ '136' ],		#self : OmReference [ '137' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeWhite,			#protocol : #putting,			#sourceCode : 'placeWhite\t\t\t\r\r\t| success |\r\tsuccess := false.\r\t(state = $_) ifTrue: [ \r\t\t1 to: 8 do: [ :direction |\r\t\t\tsuccess := (self makeWhiteInDirection: direction) or: success.\r\t\t]\r\t].\r\tsuccess ifTrue: [ state := $W ].\r\t^success',			#stamp : 'CameronBierwagen 11/7/2019 18:53',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeWhite,			#protocol : #putting,			#sourceCode : 'placeWhite\t\t\t\r\r\t| success |\r\tsuccess := false.\r\t(state = $_) ifTrue: [ \r\t\t1 to: 8 do: [ :direction |\r\t\t\tsuccess := (self makeWhiteInDirection: direction) or: success.\r\t\t]\r\t].\r\t^success',			#stamp : 'CameronBierwagen 11/7/2019 19:33',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T19:38:11.383968-08:00' ],		#prior : OmReference [ '137' ],		#self : OmReference [ '138' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeBlackInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeBlackInDirection: direction\r\t"Recursively attempts to flip over a line of white pieces terminated by a black piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $W) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeBlackInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\t\tstate := $B.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t^(nextPiece state = $B)',			#stamp : 'CameronBierwagen 11/7/2019 19:24',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeBlackInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeBlackInDirection: direction\r\t"Recursively attempts to flip over a line of white pieces terminated by a black piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $W) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeBlackInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\t\tself setState: $B.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t^(nextPiece state = $B)',			#stamp : 'CameronBierwagen 11/7/2019 19:38',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T19:46:21.634186-08:00' ],		#prior : OmReference [ '138' ],		#self : OmReference [ '139' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeBlackInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeBlackInDirection: direction\r\t"Recursively attempts to flip over a line of white pieces terminated by a black piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $W) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeBlackInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\t\tself setState: $B.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t^(nextPiece state = $B)',			#stamp : 'CameronBierwagen 11/7/2019 19:38',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeBlackInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeBlackInDirection: direction\r\t"Recursively attempts to flip over a line of white pieces terminated by a black piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $W) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeBlackInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\t\tself setState: $B.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t(nextPiece state = $B) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\tself setState: $B.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 19:46',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T19:47:39.297312-08:00' ],		#prior : OmReference [ '139' ],		#self : OmReference [ '140' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeWhiteInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeWhiteInDirection: direction\r\t"Recursively attempts to flip over a line of black pieces terminated by a white piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $B) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\t\tstate := $W.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t^(nextPiece state = $W)',			#stamp : 'CameronBierwagen 11/7/2019 16:38',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeWhiteInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeWhiteInDirection: direction\r\t"Recursively attempts to flip over a line of black pieces terminated by a white piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $B) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\t\tself setState: $W.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t(nextPiece state = $W) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\tself setState: $W.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 19:47',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T19:57:17.913739-08:00' ],		#prior : OmReference [ '140' ],		#self : OmReference [ '141' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeWhiteInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeWhiteInDirection: direction\r\t"Recursively attempts to flip over a line of black pieces terminated by a white piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $B) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\t\tself setState: $W.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t(nextPiece state = $W) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\tself setState: $W.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 19:47',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeWhiteInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeWhiteInDirection: direction\r\t"Recursively attempts to flip over a line of black pieces terminated by a white piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $B) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\t\tstate := $W.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t(nextPiece state = $W) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\tstate := $W.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 19:57',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T19:57:29.476396-08:00' ],		#prior : OmReference [ '141' ],		#self : OmReference [ '142' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeBlackInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeBlackInDirection: direction\r\t"Recursively attempts to flip over a line of white pieces terminated by a black piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $W) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeBlackInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\t\tself setState: $B.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t(nextPiece state = $B) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\tself setState: $B.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 19:46',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeBlackInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeBlackInDirection: direction\r\t"Recursively attempts to flip over a line of white pieces terminated by a black piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $W) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeBlackInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\t\tstate := $B.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t(nextPiece state = $B) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\tstate := $B.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 19:57',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T20:01:18.088989-08:00' ],		#prior : OmReference [ '142' ],		#self : OmReference [ '143' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeWhiteInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeWhiteInDirection: direction\r\t"Recursively attempts to flip over a line of black pieces terminated by a white piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $B) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\t\tstate := $W.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t(nextPiece state = $W) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\tstate := $W.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 19:57',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeWhiteInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeWhiteInDirection: direction\r\t"Recursively attempts to flip over a line of black pieces terminated by a white piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t"Recursive Case"\r\t(nextPiece state = $B) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\t\tstate := $W.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t"Base Case"\r\t(nextPiece state = $W) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\tstate := $W.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 20:01',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T20:01:39.419437-08:00' ],		#prior : OmReference [ '143' ],		#self : OmReference [ '144' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeBlackInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeBlackInDirection: direction\r\t"Recursively attempts to flip over a line of white pieces terminated by a black piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t(nextPiece state = $W) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeBlackInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\t\tstate := $B.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t(nextPiece state = $B) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\tstate := $B.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 19:57',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeBlackInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeBlackInDirection: direction\r\t"Recursively attempts to flip over a line of white pieces terminated by a black piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t"Recursive Case"\r\t(nextPiece state = $W) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeBlackInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\t\tstate := $B.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t"Base Case"\r\t(nextPiece state = $B) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\tstate := $B.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 20:01',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T20:03:39.98479-08:00' ],		#prior : OmReference [ '144' ],		#self : OmReference [ '145' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeWhiteInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeWhiteInDirection: direction\r\t"Recursively attempts to flip over a line of black pieces terminated by a white piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t"Recursive Case"\r\t(nextPiece state = $B) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\t\tstate := $W.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t"Base Case"\r\t(nextPiece state = $W) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\tstate := $W.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 20:01',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeWhiteInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeWhiteInDirection: direction\r\t"Recursively attempts to flip over a line of black pieces terminated by a white piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\tnextPiece ifNil: [  ^ false ].\r\t"Recursive Case"\r\t(nextPiece state = $B) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\t\tstate := $W.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t"Base Case"\r\t(nextPiece state = $W) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\tstate := $W.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 20:03',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T20:03:59.050132-08:00' ],		#prior : OmReference [ '145' ],		#self : OmReference [ '146' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeBlackInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeBlackInDirection: direction\r\t"Recursively attempts to flip over a line of white pieces terminated by a black piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\t"Recursive Case"\r\t(nextPiece state = $W) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeBlackInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\t\tstate := $B.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t"Base Case"\r\t(nextPiece state = $B) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\tstate := $B.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 20:01',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeBlackInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeBlackInDirection: direction\r\t"Recursively attempts to flip over a line of white pieces terminated by a black piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\tnextPiece ifNil: [  ^ false ].\r\t"Recursive Case"\r\t(nextPiece state = $W) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeBlackInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\t\tstate := $B.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t"Base Case"\r\t(nextPiece state = $B) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\tstate := $B.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 20:03',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T20:24:47.278326-08:00' ],		#prior : OmReference [ '146' ],		#self : OmReference [ '147' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeBlackInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeBlackInDirection: direction\r\t"Recursively attempts to flip over a line of white pieces terminated by a black piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\tnextPiece ifNil: [  ^ false ].\r\t"Recursive Case"\r\t(nextPiece state = $W) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeBlackInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\t\tstate := $B.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t"Base Case"\r\t(nextPiece state = $B) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\tstate := $B.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 20:03',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeBlackInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeBlackInDirection: direction\r\t"Recursively attempts to flip over a line of white pieces terminated by a black piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\tnextPiece ifNil: [  ^ false ].\r\t(nextPiece state = $_) ifTrue: [ ^ false ].\r\t"Recursive Case"\r\t(nextPiece state = $W) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeBlackInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\t\tstate := $B.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t"Base Case"\r\t(nextPiece state = $B) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\tstate := $B.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 20:24',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T20:25:49.413349-08:00' ],		#prior : OmReference [ '147' ],		#self : OmReference [ '148' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeWhiteInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeWhiteInDirection: direction\r\t"Recursively attempts to flip over a line of black pieces terminated by a white piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\tnextPiece ifNil: [  ^ false ].\r\t"Recursive Case"\r\t(nextPiece state = $B) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\t\tstate := $W.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t"Base Case"\r\t(nextPiece state = $W) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\tstate := $W.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 20:03',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeWhiteInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeWhiteInDirection: direction\r\t"Recursively attempts to flip over a line of black pieces terminated by a white piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\tnextPiece ifNil: [  ^ false ].\r\t(nextPiece state = $_) ifTrue: [ ^ false ].\r\t"Recursive Case"\r\t(nextPiece state = $B) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\t\tstate := $W.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t"Base Case"\r\t(nextPiece state = $W) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\tstate := $W.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 20:25',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T20:31:17.852056-08:00' ],		#prior : OmReference [ '148' ],		#self : OmReference [ '149' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeBlackInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeBlackInDirection: direction\r\t"Recursively attempts to flip over a line of white pieces terminated by a black piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\tnextPiece ifNil: [  ^ false ].\r\t(nextPiece state = $_) ifTrue: [ ^ false ].\r\t"Recursive Case"\r\t(nextPiece state = $W) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeBlackInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\t\tstate := $B.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t"Base Case"\r\t(nextPiece state = $B) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\tstate := $B.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 20:24',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeBlackInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeBlackInDirection: direction\r\t"Recursively attempts to flip over a line of white pieces terminated by a black piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\tnextPiece ifNil: [  ^ false ].\r\t"Recursive Case"\r\t(nextPiece state = $W) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeBlackInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\t\tstate := $B.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t"Base Case"\r\t(nextPiece state = $B) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is black, so flip ourselves."\r\t\tstate := $B.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 20:31',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T20:31:32.089464-08:00' ],		#prior : OmReference [ '149' ],		#self : OmReference [ '150' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeWhiteInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeWhiteInDirection: direction\r\t"Recursively attempts to flip over a line of black pieces terminated by a white piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\tnextPiece ifNil: [  ^ false ].\r\t(nextPiece state = $_) ifTrue: [ ^ false ].\r\t"Recursive Case"\r\t(nextPiece state = $B) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\t\tstate := $W.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t"Base Case"\r\t(nextPiece state = $W) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\tstate := $W.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 20:25',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'makeWhiteInDirection:',			#protocol : #'changing state',			#sourceCode : 'makeWhiteInDirection: direction\r\t"Recursively attempts to flip over a line of black pieces terminated by a white piece.\r\tReturn true if successful, false if not."\r\t\t\t\r\t| nextPiece |\r\tnextPiece := (neighbors at: direction).\r\tnextPiece ifNil: [  ^ false ].\r\t"Recursive Case"\r\t(nextPiece state = $B) ifTrue: [\r\t\t"This could still be a valid move."\r\t\t(nextPiece makeWhiteInDirection: direction) ifTrue: [\r\t\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\t\tstate := $W.\r\t\t\t"Keep cascading"\r\t\t\t^ true.\r\t\t].\r\t\t^ false.\t\t\r\t].\r\t"Base Case"\r\t(nextPiece state = $W) ifTrue: [ \r\t\t"We\'ve confirmed that the final piece is white, so flip ourselves."\r\t\tstate := $W.\r\t\t"Keep cascading"\r\t\t^ true.\r\t].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 20:31',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T20:34:38.422878-08:00' ],		#prior : OmReference [ '150' ],		#self : OmReference [ '151' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeBlack,			#protocol : #putting,			#sourceCode : 'placeBlack\t\t\t\r\r\t| success |\r\tsuccess := false.\r\t(state = $_) ifTrue: [ \r\t\t1 to: 8 do: [ :direction |\r\t\t\tsuccess := (self makeBlackInDirection: direction) or: success.\r\t\t]\r\t].\r\t^success',			#stamp : 'CameronBierwagen 11/7/2019 19:32',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeBlack,			#protocol : #putting,			#sourceCode : 'placeBlack\t\t\t\r\r\t| success neighbor |\r\tsuccess := false.\r\t(state = $_) ifTrue: [ \r\t\t1 to: 8 do: [ :direction |\r\t\t\tneighbor := (neighbors at: direction).\r\t\t\tneighbor ifNotNil: [\r\t\t\t\t(neighbor state = $W) ifTrue: [\r\t\t\t\t\tsuccess := (self makeBlackInDirection: direction) or: success.\r\t\t\t\t]\r\t\t\t]\r\t\t]\r\t].\r\t^success',			#stamp : 'CameronBierwagen 11/7/2019 20:34',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T20:35:22.392038-08:00' ],		#prior : OmReference [ '151' ],		#self : OmReference [ '152' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeWhite,			#protocol : #putting,			#sourceCode : 'placeWhite\t\t\t\r\r\t| success |\r\tsuccess := false.\r\t(state = $_) ifTrue: [ \r\t\t1 to: 8 do: [ :direction |\r\t\t\tsuccess := (self makeWhiteInDirection: direction) or: success.\r\t\t]\r\t].\r\t^success',			#stamp : 'CameronBierwagen 11/7/2019 19:33',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #placeWhite,			#protocol : #putting,			#sourceCode : 'placeWhite\t\t\t\r\r\t| success neighbor |\r\tsuccess := false.\r\t(state = $_) ifTrue: [ \r\t\t1 to: 8 do: [ :direction |\r\t\t\tneighbor := (neighbors at: direction).\r\t\t\tneighbor ifNotNil: [\r\t\t\t\t(neighbor state = $B) ifTrue: [\r\t\t\t\t\tsuccess := (self makeWhiteInDirection: direction) or: success.\r\t\t\t\t]\r\t\t\t]\r\t\t]\r\t].\r\t^success',			#stamp : 'CameronBierwagen 11/7/2019 20:35',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T20:51:50.625485-08:00' ],		#prior : OmReference [ '152' ],		#self : OmReference [ '153' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'checkForLegalMoveWhiteInDirection:',			#protocol : #checking,			#sourceCode : 'checkForLegalMoveWhiteInDirection: direction\r\t| neighbor|\r\tneighbor := neighbors at: direction.\r\t\r\t(neighbor state = $B) ifTrue: [ "The first one must be the opposite color for this to be a legal move."\r\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t[ neighbor state = $B ] whileTrue: [ \r\t\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t].\r\t\t^ (neighbor state = $W)\r\t].\r\t\r\t^ false',			#stamp : 'CameronBierwagen 11/6/2019 22:36',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'checkForLegalMoveWhiteInDirection:',			#protocol : #checking,			#sourceCode : 'checkForLegalMoveWhiteInDirection: direction\r\t| neighbor|\r\tneighbor := neighbors at: direction.\r\t\r\tneighbor ifNil: [ ^ false ].\r\t(neighbor state = $B) ifTrue: [ "The first one must be the opposite color for this to be a legal move."\r\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t[ neighbor state = $B ] whileTrue: [ \r\t\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t].\r\t\t^ (neighbor state = $W)\r\t].\r\t\r\t^ false',			#stamp : 'CameronBierwagen 11/7/2019 20:51',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T20:52:50.881767-08:00' ],		#prior : OmReference [ '153' ],		#self : OmReference [ '154' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'checkForLegalMoveBlackInDirection:',			#protocol : #checking,			#sourceCode : 'checkForLegalMoveBlackInDirection: direction\r\t| neighbor|\r\tneighbor := neighbors at: direction.\r\t\r\t(neighbor state = $W) ifTrue: [ "The first one must be the opposite color for this to be a legal move."\r\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t[ neighbor state = $W ] whileTrue: [ \r\t\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t].\r\t\t^ (neighbor state = $B)\r\t].\r\t\r\t^ false',			#stamp : 'CameronBierwagen 11/6/2019 22:31',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'checkForLegalMoveBlackInDirection:',			#protocol : #checking,			#sourceCode : 'checkForLegalMoveBlackInDirection: direction\r\t| neighbor|\r\tneighbor := neighbors at: direction.\r\t\r\tneighbor ifNil: [ ^ false ].\r\t(neighbor state = $W) ifTrue: [ "The first one must be the opposite color for this to be a legal move."\r\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t[ neighbor state = $W ] whileTrue: [ \r\t\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t].\r\t\t^ (neighbor state = $B)\r\t].\r\t\r\t^ false',			#stamp : 'CameronBierwagen 11/7/2019 20:52',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:05:01.70159-08:00' ],		#prior : OmReference [ '154' ],		#self : OmReference [ '155' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiGame\r\tinstanceVariableNames: \'board turn\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiGame,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #board,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #turn,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiGame class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiGame class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiGame				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		},		#protocol : #playing	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:06:51.189001-08:00' ],		#prior : OmReference [ '155' ],		#self : OmReference [ '156' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:06',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:07:38.702034-08:00' ],		#prior : OmReference [ '156' ],		#self : OmReference [ '157' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #endGame,			#protocol : #playing,			#sourceCode : 'endGame\r\t"Tally the score and declare a winner"\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:07',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:33:01.88912-08:00' ],		#prior : OmReference [ '157' ],		#self : OmReference [ '158' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:06',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\tUIManager default request:\r\t(String streamContents: [ :stream | \r\t\tstream nextPutAll: (board boardAsString); cr;\r\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\tinitialAnswer: \' Test \' title: (turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\'.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:33',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:33:34.637541-08:00' ],		#prior : OmReference [ '158' ],		#self : OmReference [ '159' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\tUIManager default request:\r\t(String streamContents: [ :stream | \r\t\tstream nextPutAll: (board boardAsString); cr;\r\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\tinitialAnswer: \' Test \' title: (turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\'.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:33',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\tUIManager default request:\r\t(String streamContents: [ :stream | \r\t\tstream nextPutAll: (board boardAsString); cr;\r\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\tinitialAnswer: \'\' title: ((turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\').\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:33',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:37:21.33397-08:00' ],		#prior : OmReference [ '159' ],		#self : OmReference [ '160' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\tUIManager default request:\r\t(String streamContents: [ :stream | \r\t\tstream nextPutAll: (board boardAsString); cr;\r\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\tinitialAnswer: \'\' title: ((turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\').\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:33',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success |\r\tsuccess := false.\r\tsuccess whileFalse: [ ].\r\tUIManager default request:\r\t(String streamContents: [ :stream | \r\t\tstream nextPutAll: (board boardAsString); cr;\r\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\tinitialAnswer: \'\' title: ((turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\').\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:37',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:39:04.394573-08:00' ],		#prior : OmReference [ '160' ],		#self : OmReference [ '161' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success |\r\tsuccess := false.\r\tsuccess whileFalse: [ ].\r\tUIManager default request:\r\t(String streamContents: [ :stream | \r\t\tstream nextPutAll: (board boardAsString); cr;\r\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\tinitialAnswer: \'\' title: ((turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\').\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:37',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success |\r\tsuccess := false.\r\tUIManager default request:\r\t(String streamContents: [ :stream | \r\t\tstream nextPutAll: (board boardAsString); cr;\r\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\tinitialAnswer: \'\' title: ((turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\').\r\tsuccess whileFalse: [\r\t\tUIManager default request:\r\t(String streamContents: [ :stream | \r\t\tstream nextPutAll: (board boardAsString); cr;\r\t\tnextPutAll: \'That was not a valid move. Please try again.\'; cr;\r\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\tinitialAnswer: \'\' title: ((turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\').\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:39',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:46:35.057961-08:00' ],		#prior : OmReference [ '161' ],		#self : OmReference [ '162' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiGame\r\tinstanceVariableNames: \'board turn\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiGame,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #board,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #turn,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiGame class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiGame class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiGame				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		},		#protocol : #'user requests'	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:47:46.738446-08:00' ],		#prior : OmReference [ '162' ],		#self : OmReference [ '163' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #requestInput,			#protocol : #'user requests',			#sourceCode : 'requestInput\r\tUIManager default request:\r\t(String streamContents: [ :stream | \r\t\tstream nextPutAll: (board boardAsString); cr;\r\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\tinitialAnswer: \'\' title: ((turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\').',			#stamp : 'CameronBierwagen 11/7/2019 21:47',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:48:05.375621-08:00' ],		#prior : OmReference [ '163' ],		#self : OmReference [ '164' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #requestInputWithError,			#protocol : #'user requests',			#sourceCode : 'requestInputWithError\r\tUIManager default request:\r\t(String streamContents: [ :stream | \r\t\tstream nextPutAll: (board boardAsString); cr;\r\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\tinitialAnswer: \'\' title: ((turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\').',			#stamp : 'CameronBierwagen 11/7/2019 21:48',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:48:28.613696-08:00' ],		#prior : OmReference [ '164' ],		#self : OmReference [ '165' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #requestInputWithError,			#protocol : #'user requests',			#sourceCode : 'requestInputWithError\r\tUIManager default request:\r\t(String streamContents: [ :stream | \r\t\tstream nextPutAll: (board boardAsString); cr;\r\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\tinitialAnswer: \'\' title: ((turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\').',			#stamp : 'CameronBierwagen 11/7/2019 21:48',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #requestInputWithError,			#protocol : #'user requests',			#sourceCode : 'requestInputWithError\r\tUIManager default request:\r\t\t(String streamContents: [ :stream | \r\t\t\tstream nextPutAll: (board boardAsString); cr;\r\t\t\tnextPutAll: \'That was not a valid move. Please try again.\'; cr;\r\t\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\t\tinitialAnswer: \'\' title: ((turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\').',			#stamp : 'CameronBierwagen 11/7/2019 21:48',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:48:44.946208-08:00' ],		#prior : OmReference [ '165' ],		#self : OmReference [ '166' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #requestInput,			#protocol : #'user requests',			#sourceCode : 'requestInput\r\tUIManager default request:\r\t(String streamContents: [ :stream | \r\t\tstream nextPutAll: (board boardAsString); cr;\r\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\tinitialAnswer: \'\' title: ((turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\').',			#stamp : 'CameronBierwagen 11/7/2019 21:47',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #requestInput,			#protocol : #'user requests',			#sourceCode : 'requestInput\r\tUIManager default request:\r\t\t(String streamContents: [ :stream | \r\t\t\tstream nextPutAll: (board boardAsString); cr;\r\t\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\t\tinitialAnswer: \'\' title: ((turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\').',			#stamp : 'CameronBierwagen 11/7/2019 21:48',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:49:44.748888-08:00' ],		#prior : OmReference [ '166' ],		#self : OmReference [ '167' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success |\r\tsuccess := false.\r\tUIManager default request:\r\t(String streamContents: [ :stream | \r\t\tstream nextPutAll: (board boardAsString); cr;\r\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\tinitialAnswer: \'\' title: ((turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\').\r\tsuccess whileFalse: [\r\t\tUIManager default request:\r\t(String streamContents: [ :stream | \r\t\tstream nextPutAll: (board boardAsString); cr;\r\t\tnextPutAll: \'That was not a valid move. Please try again.\'; cr;\r\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\tinitialAnswer: \'\' title: ((turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\').\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:39',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| input success |\r\tsuccess := false.\r\t\r\t\r\t\r\t"The first attempt didn\'t work."\r\tsuccess whileFalse: [\r\t\t\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:49',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:50:08.413924-08:00' ],		#prior : OmReference [ '167' ],		#self : OmReference [ '168' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| input success |\r\tsuccess := false.\r\t\r\t\r\t\r\t"The first attempt didn\'t work."\r\tsuccess whileFalse: [\r\t\t\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:49',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| input success |\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\t\r\t\r\t"The first attempt didn\'t work."\r\tsuccess whileFalse: [\r\t\t\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:50',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:50:29.424801-08:00' ],		#prior : OmReference [ '168' ],		#self : OmReference [ '169' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| input success |\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\t\r\t\r\t"The first attempt didn\'t work."\r\tsuccess whileFalse: [\r\t\t\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:50',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| input success |\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\t\r\t"The first attempt didn\'t work."\r\tsuccess whileFalse: [\r\t\tinput := self requestInputWithError.\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:50',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:50:44.501976-08:00' ],		#prior : OmReference [ '169' ],		#self : OmReference [ '170' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| input success |\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\t\r\t"The first attempt didn\'t work."\r\tsuccess whileFalse: [\r\t\tinput := self requestInputWithError.\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:50',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input |\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\t\r\t"The first attempt didn\'t work."\r\tsuccess whileFalse: [\r\t\tinput := self requestInputWithError.\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:50',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:54:18.102657-08:00' ],		#prior : OmReference [ '170' ],		#self : OmReference [ '171' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input |\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\t\r\t"The first attempt didn\'t work."\r\tsuccess whileFalse: [\r\t\tinput := self requestInputWithError.\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:50',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\trow := ((input at: 1) value) - 64.\r\tcol := (input at: 2).\r\t\r\t\r\t"The first attempt didn\'t work."\r\tsuccess whileFalse: [\r\t\tinput := self requestInputWithError.\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:54',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:56:06.696431-08:00' ],		#prior : OmReference [ '171' ],		#self : OmReference [ '172' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\trow := ((input at: 1) value) - 64.\r\tcol := (input at: 2).\r\t\r\t\r\t"The first attempt didn\'t work."\r\tsuccess whileFalse: [\r\t\tinput := self requestInputWithError.\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:54',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2).\r\t\r\t\r\t"The first attempt didn\'t work."\r\tsuccess whileFalse: [\r\t\tinput := self requestInputWithError.\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:56',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:58:42.789627-08:00' ],		#prior : OmReference [ '172' ],		#self : OmReference [ '173' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2).\r\t\r\t\r\t"The first attempt didn\'t work."\r\tsuccess whileFalse: [\r\t\tinput := self requestInputWithError.\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:56',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2).\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\tsuccess whileFalse: [\r\t\tinput := self requestInputWithError.\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:58',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T21:59:22.483246-08:00' ],		#prior : OmReference [ '173' ],		#self : OmReference [ '174' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2).\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\tsuccess whileFalse: [\r\t\tinput := self requestInputWithError.\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:58',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2).\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\tsuccess whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2).\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:59',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:01:39.097226-08:00' ],		#prior : OmReference [ '174' ],		#self : OmReference [ '175' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #requestInput,			#protocol : #'user requests',			#sourceCode : 'requestInput\r\tUIManager default request:\r\t\t(String streamContents: [ :stream | \r\t\t\tstream nextPutAll: (board boardAsString); cr;\r\t\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\t\tinitialAnswer: \'\' title: ((turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\').',			#stamp : 'CameronBierwagen 11/7/2019 21:48',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #requestInput,			#protocol : #'user requests',			#sourceCode : 'requestInput\r\t^ (UIManager default request:\r\t\t(String streamContents: [ :stream | \r\t\t\tstream nextPutAll: (board boardAsString); cr;\r\t\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\t\tinitialAnswer: \'\' title: ((turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\')).',			#stamp : 'CameronBierwagen 11/7/2019 22:01',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:01:47.448908-08:00' ],		#prior : OmReference [ '175' ],		#self : OmReference [ '176' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #requestInputWithError,			#protocol : #'user requests',			#sourceCode : 'requestInputWithError\r\tUIManager default request:\r\t\t(String streamContents: [ :stream | \r\t\t\tstream nextPutAll: (board boardAsString); cr;\r\t\t\tnextPutAll: \'That was not a valid move. Please try again.\'; cr;\r\t\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\t\tinitialAnswer: \'\' title: ((turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\').',			#stamp : 'CameronBierwagen 11/7/2019 21:48',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #requestInputWithError,			#protocol : #'user requests',			#sourceCode : 'requestInputWithError\r\t^ (UIManager default request:\r\t\t(String streamContents: [ :stream | \r\t\t\tstream nextPutAll: (board boardAsString); cr;\r\t\t\tnextPutAll: \'That was not a valid move. Please try again.\'; cr;\r\t\t\tnextPutAll: \'Enter the cell in which to place your next piece (for example, "I9").\' ])\r\t\tinitialAnswer: \'\' title: ((turn = $B) ifTrue: \'Black\'\'s Turn\' ifFalse: \'White\'\'s turn\')).',			#stamp : 'CameronBierwagen 11/7/2019 22:01',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:03:24.341725-08:00' ],		#prior : OmReference [ '176' ],		#self : OmReference [ '177' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2).\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\tsuccess whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2).\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:59',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\tsuccess whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2).\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:03',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:03:47.644482-08:00' ],		#prior : OmReference [ '177' ],		#self : OmReference [ '178' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\tsuccess whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2).\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:03',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2).\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:03',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:05:01.949972-08:00' ],		#prior : OmReference [ '178' ],		#self : OmReference [ '179' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2).\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:03',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:05',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:06:26.484404-08:00' ],		#prior : OmReference [ '179' ],		#self : OmReference [ '180' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:05',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := \'I9\'.\r\tinput := self requestInput.\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:06',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:07:05.948338-08:00' ],		#prior : OmReference [ '180' ],		#self : OmReference [ '181' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := \'I9\'.\r\tinput := self requestInput.\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:06',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tinput ifNil: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:07',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:07:24.220545-08:00' ],		#prior : OmReference [ '181' ],		#self : OmReference [ '182' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tinput ifNil: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:07',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tinput ifNil: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:07',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:08:52.194864-08:00' ],		#prior : OmReference [ '182' ],		#self : OmReference [ '183' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tinput ifNil: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:07',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tinput ifNil: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ input := \'I9\' ].\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:08',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:09:11.7526-08:00' ],		#prior : OmReference [ '183' ],		#self : OmReference [ '184' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tinput ifNil: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ input := \'I9\' ].\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:08',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tinput ifNil: [ input := \'I9\' ].\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ input := \'I9\' ].\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:09',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:11:39.101783-08:00' ],		#prior : OmReference [ '184' ],		#self : OmReference [ '185' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tinput ifNil: [ input := \'I9\' ].\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ input := \'I9\' ].\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:09',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self delete ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ input := \'I9\' ].\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:11',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:13:35.871831-08:00' ],		#prior : OmReference [ '185' ],		#self : OmReference [ '186' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self delete ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ input := \'I9\' ].\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:11',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\t"input ifNil: [ self delete ]."\r\t"If input doesn\'t meet requirements"\r\t"((input size) < 2) ifTrue: [ input := \'I9\' ]."\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ input := \'I9\' ].\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:13',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:13:51.164823-08:00' ],		#prior : OmReference [ '186' ],		#self : OmReference [ '187' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\t"input ifNil: [ self delete ]."\r\t"If input doesn\'t meet requirements"\r\t"((input size) < 2) ifTrue: [ input := \'I9\' ]."\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ input := \'I9\' ].\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:13',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self delete ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ input := \'I9\' ].\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:13',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:17:33.81235-08:00' ],		#prior : OmReference [ '187' ],		#self : OmReference [ '188' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self delete ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ input := \'I9\' ].\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r\t\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:13',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ input := \'I9\' ].\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:17',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:18:37.764949-08:00' ],		#prior : OmReference [ '188' ],		#self : OmReference [ '189' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ input := \'I9\' ].\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:17',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ input := \'I9\' ].\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\tTranscript show: row; space; show: col.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:18',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:20:08.924109-08:00' ],		#prior : OmReference [ '189' ],		#self : OmReference [ '190' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ input := \'I9\' ].\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\tTranscript show: row; space; show: col.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:18',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t"If cancel button is clicked"\r\t\tinput ifNil: [ self endGame. ^false ].\r\t\t"If input doesn\'t meet requirements"\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\tTranscript show: row; space; show: col.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:20',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:20:48.622707-08:00' ],		#prior : OmReference [ '190' ],		#self : OmReference [ '191' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asInteger.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t"If cancel button is clicked"\r\t\tinput ifNil: [ self endGame. ^false ].\r\t\t"If input doesn\'t meet requirements"\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\tTranscript show: row; space; show: col.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:20',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asNumber.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t"If cancel button is clicked"\r\t\tinput ifNil: [ self endGame. ^false ].\r\t\t"If input doesn\'t meet requirements"\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\tTranscript show: row; space; show: col.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:20',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:23:48.225489-08:00' ],		#prior : OmReference [ '191' ],		#self : OmReference [ '192' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := ((input at: 1) codePoint) - 64.\r\tcol := (input at: 2) asNumber.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t"If cancel button is clicked"\r\t\tinput ifNil: [ self endGame. ^false ].\r\t\t"If input doesn\'t meet requirements"\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\tTranscript show: row; space; show: col.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:20',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := (((input at: 1) translateToUppercase) codePoint) - 64.\r\tcol := ((input at: 2) codePoint) - 48.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t"If cancel button is clicked"\r\t\tinput ifNil: [ self endGame. ^false ].\r\t\t"If input doesn\'t meet requirements"\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\tTranscript show: row; space; show: col.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:23',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:24:10.65738-08:00' ],		#prior : OmReference [ '192' ],		#self : OmReference [ '193' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := (((input at: 1) translateToUppercase) codePoint) - 64.\r\tcol := ((input at: 2) codePoint) - 48.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t"If cancel button is clicked"\r\t\tinput ifNil: [ self endGame. ^false ].\r\t\t"If input doesn\'t meet requirements"\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\tTranscript show: row; space; show: col.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:23',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := (((input at: 1) asUppercase) codePoint) - 64.\r\tcol := ((input at: 2) codePoint) - 48.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t"If cancel button is clicked"\r\t\tinput ifNil: [ self endGame. ^false ].\r\t\t"If input doesn\'t meet requirements"\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\tTranscript show: row; space; show: col.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:24',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:26:28.342566-08:00' ],		#prior : OmReference [ '193' ],		#self : OmReference [ '194' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := (((input at: 1) asUppercase) codePoint) - 64.\r\tcol := ((input at: 2) codePoint) - 48.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t"If cancel button is clicked"\r\t\tinput ifNil: [ self endGame. ^false ].\r\t\t"If input doesn\'t meet requirements"\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := ((input at: 1) codePoint) - 64.\r\t\tcol := (input at: 2) asInteger.\r\t\tTranscript show: row; space; show: col.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:24',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := (((input at: 1) asUppercase) codePoint) - 64.\r\tcol := ((input at: 2) codePoint) - 48.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t"If cancel button is clicked"\r\t\tinput ifNil: [ self endGame. ^false ].\r\t\t"If input doesn\'t meet requirements"\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := (((input at: 1) asUppercase) codePoint) - 64.\r\t\tcol := ((input at: 2) codePoint) - 48.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:26',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:30:47.061929-08:00' ],		#prior : OmReference [ '194' ],		#self : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #'moveFromInput:',			#protocol : #playing,			#sourceCode : 'moveFromInput: input\r\t| row col |\r\trow := 0.\r\tcol := 0.\r\t\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"Make sure input meets length requirement"\r\t((input size) = 2) ifTrue: [ \r\t\trow := (((input at: 1) asUppercase) codePoint) - 64.\r\t\tcol := ((input at: 2) codePoint) - 48.\r\t].\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t^ (board getCellAt: row at: col) placePiece: turn.\r\t].',			#stamp : 'CameronBierwagen 11/7/2019 22:30',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:31:10.312942-08:00' ],		#prior : OmReference [ '195' ],		#self : OmReference [ '196' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #'moveFromInput:',			#protocol : #playing,			#sourceCode : 'moveFromInput: input\r\t| row col |\r\trow := 0.\r\tcol := 0.\r\t\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"Make sure input meets length requirement"\r\t((input size) = 2) ifTrue: [ \r\t\trow := (((input at: 1) asUppercase) codePoint) - 64.\r\t\tcol := ((input at: 2) codePoint) - 48.\r\t].\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t^ (board getCellAt: row at: col) placePiece: turn.\r\t].',			#stamp : 'CameronBierwagen 11/7/2019 22:30',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #'moveFromInput:',			#protocol : #playing,			#sourceCode : 'moveFromInput: input\r\t| row col |\r\trow := 0.\r\tcol := 0.\r\t\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"Make sure input meets length requirement"\r\t((input size) = 2) ifTrue: [ \r\t\trow := (((input at: 1) asUppercase) codePoint) - 64.\r\t\tcol := ((input at: 2) codePoint) - 48.\r\t].\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t^ ((board getCellAt: row at: col) placePiece: turn).\r\t].',			#stamp : 'CameronBierwagen 11/7/2019 22:31',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:31:19.435651-08:00' ],		#prior : OmReference [ '196' ],		#self : OmReference [ '197' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #'moveFromInput:',			#protocol : #playing,			#sourceCode : 'moveFromInput: input\r\t| row col |\r\trow := 0.\r\tcol := 0.\r\t\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"Make sure input meets length requirement"\r\t((input size) = 2) ifTrue: [ \r\t\trow := (((input at: 1) asUppercase) codePoint) - 64.\r\t\tcol := ((input at: 2) codePoint) - 48.\r\t].\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t^ ((board getCellAt: row at: col) placePiece: turn).\r\t].',			#stamp : 'CameronBierwagen 11/7/2019 22:31',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #'moveFromInput:',			#protocol : #playing,			#sourceCode : 'moveFromInput: input\r\t| row col |\r\trow := 0.\r\tcol := 0.\r\t\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"Make sure input meets length requirement"\r\t((input size) = 2) ifTrue: [ \r\t\trow := (((input at: 1) asUppercase) codePoint) - 64.\r\t\tcol := ((input at: 2) codePoint) - 48.\r\t].\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t^ (board getCellAt: row at: col) placePiece: turn.\r\t].',			#stamp : 'CameronBierwagen 11/7/2019 22:31',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:31:25.436656-08:00' ],		#prior : OmReference [ '197' ],		#self : OmReference [ '198' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #'moveFromInput:',			#protocol : #playing,			#sourceCode : 'moveFromInput: input\r\t| row col |\r\trow := 0.\r\tcol := 0.\r\t\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"Make sure input meets length requirement"\r\t((input size) = 2) ifTrue: [ \r\t\trow := (((input at: 1) asUppercase) codePoint) - 64.\r\t\tcol := ((input at: 2) codePoint) - 48.\r\t].\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t^ (board getCellAt: row at: col) placePiece: turn.\r\t].',			#stamp : 'CameronBierwagen 11/7/2019 22:31',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #'moveFromInput:',			#protocol : #playing,			#sourceCode : 'moveFromInput: input\r\t| row col |\r\trow := 0.\r\tcol := 0.\r\t\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"Make sure input meets length requirement"\r\t((input size) = 2) ifTrue: [ \r\t\trow := (((input at: 1) asUppercase) codePoint) - 64.\r\t\tcol := ((input at: 2) codePoint) - 48.\r\t].\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t^ ((board getCellAt: row at: col) placePiece: turn).\r\t].',			#stamp : 'CameronBierwagen 11/7/2019 22:31',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:31:38.588111-08:00' ],		#prior : OmReference [ '198' ],		#self : OmReference [ '199' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #'moveFromInput:',			#protocol : #playing,			#sourceCode : 'moveFromInput: input\r\t| row col |\r\trow := 0.\r\tcol := 0.\r\t\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"Make sure input meets length requirement"\r\t((input size) = 2) ifTrue: [ \r\t\trow := (((input at: 1) asUppercase) codePoint) - 64.\r\t\tcol := ((input at: 2) codePoint) - 48.\r\t].\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t^ ((board getCellAt: row at: col) placePiece: turn).\r\t].',			#stamp : 'CameronBierwagen 11/7/2019 22:31',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #'moveFromInput:',			#protocol : #playing,			#sourceCode : 'moveFromInput: input\r\t| row col |\r\trow := 0.\r\tcol := 0.\r\t\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"Make sure input meets length requirement"\r\t((input size) = 2) ifTrue: [ \r\t\trow := (((input at: 1) asUppercase) codePoint) - 64.\r\t\tcol := ((input at: 2) codePoint) - 48.\r\t].\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t^ ((board getCellAt: row at: col) placePiece: turn).\r\t].\r\r^false',			#stamp : 'CameronBierwagen 11/7/2019 22:31',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:32:08.806293-08:00' ],		#prior : OmReference [ '199' ],		#self : OmReference [ '200' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := (((input at: 1) asUppercase) codePoint) - 64.\r\tcol := ((input at: 2) codePoint) - 48.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\t"If cancel button is clicked"\r\t\tinput ifNil: [ self endGame. ^false ].\r\t\t"If input doesn\'t meet requirements"\r\t\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\t\r\t\trow := (((input at: 1) asUppercase) codePoint) - 64.\r\t\tcol := ((input at: 2) codePoint) - 48.\r\t\r\t\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t\t].\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:26',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := (((input at: 1) asUppercase) codePoint) - 64.\r\tcol := ((input at: 2) codePoint) - 48.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tsuccess := (self moveFromInput: input)\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:32',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:32:25.112423-08:00' ],		#prior : OmReference [ '200' ],		#self : OmReference [ '201' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"If input doesn\'t meet requirements"\r\t((input size) < 2) ifTrue: [ input := \'I9\' ].\r\t\r\trow := (((input at: 1) asUppercase) codePoint) - 64.\r\tcol := ((input at: 2) codePoint) - 48.\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\tsuccess := (board getCellAt: row at: col) placePiece: turn.\r\t].\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tsuccess := (self moveFromInput: input)\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:32',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tsuccess := (self moveFromInput: input).\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tsuccess := (self moveFromInput: input)\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:32',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:32:32.695217-08:00' ],		#prior : OmReference [ '201' ],		#self : OmReference [ '202' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input row col|\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tsuccess := (self moveFromInput: input).\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tsuccess := (self moveFromInput: input)\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:32',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input |\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tsuccess := (self moveFromInput: input).\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tsuccess := (self moveFromInput: input)\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:32',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:33:50.359403-08:00' ],		#prior : OmReference [ '202' ],		#self : OmReference [ '203' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #'moveFromInput:',			#protocol : #playing,			#sourceCode : 'moveFromInput: input\r\t| row col |\r\trow := 0.\r\tcol := 0.\r\t\r\t"If cancel button is clicked"\r\tinput ifNil: [ self endGame. ^false ].\r\t"Make sure input meets length requirement"\r\t((input size) = 2) ifTrue: [ \r\t\trow := (((input at: 1) asUppercase) codePoint) - 64.\r\t\tcol := ((input at: 2) codePoint) - 48.\r\t].\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t^ ((board getCellAt: row at: col) placePiece: turn).\r\t].\r\r^false',			#stamp : 'CameronBierwagen 11/7/2019 22:31',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #'moveFromInput:',			#protocol : #playing,			#sourceCode : 'moveFromInput: input\r\t| row col |\r\trow := 0.\r\tcol := 0.\r\t\r\t"Make sure input meets length requirement"\r\t((input size) = 2) ifTrue: [ \r\t\trow := (((input at: 1) asUppercase) codePoint) - 64.\r\t\tcol := ((input at: 2) codePoint) - 48.\r\t].\r\t\r\t((row > 0) and: [(row < 9) and: [(col > 0) and: [col < 9]]]) ifTrue: [\r\t\t^ ((board getCellAt: row at: col) placePiece: turn).\r\t].\r\r^false',			#stamp : 'CameronBierwagen 11/7/2019 22:33',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:34:19.107024-08:00' ],		#prior : OmReference [ '203' ],		#self : OmReference [ '204' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input |\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tsuccess := (self moveFromInput: input).\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tsuccess := (self moveFromInput: input)\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:32',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input |\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tinput ifNil: [ self endGame. ^false ].\r\tsuccess := (self moveFromInput: input).\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ self endGame. ^false ].\r\t\tsuccess := (self moveFromInput: input)\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:34',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:37:06.69247-08:00' ],		#prior : OmReference [ '204' ],		#self : OmReference [ '205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'checkForLegalMoves:',			#protocol : #checking,			#sourceCode : 'checkForLegalMoves: color\r\t\t\t\r\t(color = $B) ifTrue: [ ^(self checkForLegalMovesBlack) ].\r\t(color = $W) ifTrue: [ ^(self checkForLegalMovesWhite) ].',			#stamp : 'CameronBierwagen 11/7/2019 22:37',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:37:22.283602-08:00' ],		#prior : OmReference [ '205' ],		#self : OmReference [ '206' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'checkForLegalMoves:',			#protocol : #checking,			#sourceCode : 'checkForLegalMoves: color\r\t\t\t\r\t(color = $B) ifTrue: [ ^(self checkForLegalMovesBlack) ].\r\t(color = $W) ifTrue: [ ^(self checkForLegalMovesWhite) ].',			#stamp : 'CameronBierwagen 11/7/2019 22:37',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #'checkForLegalMoves:',			#protocol : #checking,			#sourceCode : 'checkForLegalMoves: color\r\t\t\t\r\t(color = $B) ifTrue: [ ^(self checkForLegalMovesBlack) ].\r\t(color = $W) ifTrue: [ ^(self checkForLegalMovesWhite) ].\r\t^ false.',			#stamp : 'CameronBierwagen 11/7/2019 22:37',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:39:33.573898-08:00' ],		#prior : OmReference [ '206' ],		#self : OmReference [ '207' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #takeTurn,			#protocol : #playing,			#sourceCode : 'takeTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input |\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tinput ifNil: [ self endGame. ^false ].\r\tsuccess := (self moveFromInput: input).\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ self endGame. ^false ].\r\t\tsuccess := (self moveFromInput: input)\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:39',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:39:37.5866-08:00' ],		#prior : OmReference [ '207' ],		#self : OmReference [ '208' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input |\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tinput ifNil: [ self endGame. ^false ].\r\tsuccess := (self moveFromInput: input).\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ self endGame. ^false ].\r\t\tsuccess := (self moveFromInput: input)\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:34',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #'as yet unclassified',			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input |\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tinput ifNil: [ self endGame. ^false ].\r\tsuccess := (self moveFromInput: input).\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ self endGame. ^false ].\r\t\tsuccess := (self moveFromInput: input)\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:34',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:39:37.59037-08:00' ],		#prior : OmReference [ '208' ],		#self : OmReference [ '209' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input |\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tinput ifNil: [ self endGame. ^false ].\r\tsuccess := (self moveFromInput: input).\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ self endGame. ^false ].\r\t\tsuccess := (self moveFromInput: input)\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:34',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:41:23.404671-08:00' ],		#prior : OmReference [ '209' ],		#self : OmReference [ '210' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Changes the turn to the next player"\r\t(turn = $B) ifTrue: [ turn = $W ] ifFalse: [ turn = $B ].',			#stamp : 'CameronBierwagen 11/7/2019 22:41',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:41:35.560202-08:00' ],		#prior : OmReference [ '210' ],		#self : OmReference [ '211' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Changes the turn to the next player"\r\t(turn = $B) ifTrue: [ turn = $W ] ifFalse: [ turn = $B ].',			#stamp : 'CameronBierwagen 11/7/2019 22:41',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #nextTurn,			#protocol : #playing,			#sourceCode : 'nextTurn\r\t"Changes the turn to the next player"\r\t(turn = $B) ifTrue: [ turn := $W ] ifFalse: [ turn := $B ].',			#stamp : 'CameronBierwagen 11/7/2019 22:41',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:42:54.476823-08:00' ],		#prior : OmReference [ '211' ],		#self : OmReference [ '212' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiGame\r\tinstanceVariableNames: \'board turn\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiGame,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #board,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #turn,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiGame class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiGame class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiGame				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ReversiGame\r\tinstanceVariableNames: \'board turn active\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reversi\''			},			#name : #ReversiGame,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #board,					#parent : @25				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #turn,					#parent : @25				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#isMetaSide : false,						#className : #ReversiGame					},					#name : #active,					#parent : @25				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReversiGame class\r\tinstanceVariableNames: \'\''				},				#name : #'ReversiGame class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @25			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#isMetaSide : false,					#className : #ReversiGame				},				#parent : @25,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reversi,			#package : #Reversi,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:43:47.738404-08:00' ],		#prior : OmReference [ '212' ],		#self : OmReference [ '213' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tsuper initialize.\r\tboard := ReversiBoard new.\r\tturn := $B.',			#stamp : 'CameronBierwagen 11/7/2019 18:59',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tsuper initialize.\r\tboard := ReversiBoard new.\r\tturn := $B.\r\tactive := true.\r\t\r\t[ active ] whileTrue: [ \r\t\tself takeTurn.\r\t\tself nextTurn.\r\t\tactive := (board checkForLegalMoves: turn).\r\t]',			#stamp : 'CameronBierwagen 11/7/2019 22:43',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:46:53.050143-08:00' ],		#prior : OmReference [ '213' ],		#self : OmReference [ '214' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'checkForLegalMoveBlackInDirection:',			#protocol : #checking,			#sourceCode : 'checkForLegalMoveBlackInDirection: direction\r\t| neighbor|\r\tneighbor := neighbors at: direction.\r\t\r\tneighbor ifNil: [ ^ false ].\r\t(neighbor state = $W) ifTrue: [ "The first one must be the opposite color for this to be a legal move."\r\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t[ neighbor state = $W ] whileTrue: [ \r\t\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t].\r\t\t^ (neighbor state = $B)\r\t].\r\t\r\t^ false',			#stamp : 'CameronBierwagen 11/7/2019 20:52',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'checkForLegalMoveBlackInDirection:',			#protocol : #checking,			#sourceCode : 'checkForLegalMoveBlackInDirection: direction\r\t| neighbor|\r\tneighbor := neighbors at: direction.\r\t\r\tneighbor ifNil: [ ^ false ].\r\t(neighbor state = $W) ifTrue: [ "The first one must be the opposite color for this to be a legal move."\r\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\tneighbor ifNil: [ ^ false ].\r\t\t[ neighbor state = $W ] whileTrue: [ \r\t\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t].\r\t\t^ (neighbor state = $B)\r\t].\r\t\r\t^ false',			#stamp : 'CameronBierwagen 11/7/2019 22:46',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:47:11.674927-08:00' ],		#prior : OmReference [ '214' ],		#self : OmReference [ '215' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'checkForLegalMoveBlackInDirection:',			#protocol : #checking,			#sourceCode : 'checkForLegalMoveBlackInDirection: direction\r\t| neighbor|\r\tneighbor := neighbors at: direction.\r\t\r\tneighbor ifNil: [ ^ false ].\r\t(neighbor state = $W) ifTrue: [ "The first one must be the opposite color for this to be a legal move."\r\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\tneighbor ifNil: [ ^ false ].\r\t\t[ neighbor state = $W ] whileTrue: [ \r\t\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t].\r\t\t^ (neighbor state = $B)\r\t].\r\t\r\t^ false',			#stamp : 'CameronBierwagen 11/7/2019 22:46',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'checkForLegalMoveBlackInDirection:',			#protocol : #checking,			#sourceCode : 'checkForLegalMoveBlackInDirection: direction\r\t| neighbor|\r\tneighbor := neighbors at: direction.\r\t\r\tneighbor ifNil: [ ^ false ].\r\t(neighbor state = $W) ifTrue: [ "The first one must be the opposite color for this to be a legal move."\r\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\tneighbor ifNil: [ ^ false ].\r\t\t[ neighbor state = $W ] whileTrue: [ \r\t\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t\tneighbor ifNil: [ ^ false ].\r\t\t].\r\t\t^ (neighbor state = $B)\r\t].\r\t\r\t^ false',			#stamp : 'CameronBierwagen 11/7/2019 22:47',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T22:47:49.051453-08:00' ],		#prior : OmReference [ '215' ],		#self : OmReference [ '216' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'checkForLegalMoveWhiteInDirection:',			#protocol : #checking,			#sourceCode : 'checkForLegalMoveWhiteInDirection: direction\r\t| neighbor|\r\tneighbor := neighbors at: direction.\r\t\r\tneighbor ifNil: [ ^ false ].\r\t(neighbor state = $B) ifTrue: [ "The first one must be the opposite color for this to be a legal move."\r\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t[ neighbor state = $B ] whileTrue: [ \r\t\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t].\r\t\t^ (neighbor state = $W)\r\t].\r\t\r\t^ false',			#stamp : 'CameronBierwagen 11/7/2019 20:51',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiCell			},			#name : #'checkForLegalMoveWhiteInDirection:',			#protocol : #checking,			#sourceCode : 'checkForLegalMoveWhiteInDirection: direction\r\t| neighbor|\r\tneighbor := neighbors at: direction.\r\t\r\tneighbor ifNil: [ ^ false ].\r\t(neighbor state = $B) ifTrue: [ "The first one must be the opposite color for this to be a legal move."\r\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\tneighbor ifNil: [ ^ false ].\r\t\t[ neighbor state = $B ] whileTrue: [ \r\t\t\tneighbor := neighbor neighborAtDirection: direction.\r\t\t\tneighbor ifNil: [ ^ false ].\r\t\t].\r\t\t^ (neighbor state = $W)\r\t].\r\t\r\t^ false',			#stamp : 'CameronBierwagen 11/7/2019 22:47',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T23:03:18.898479-08:00' ],		#prior : OmReference [ '216' ],		#self : OmReference [ '217' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #getScores,			#protocol : #checking,			#sourceCode : 'getScores\r\r\t| score |\r\t\r\t"First index is Black, second is White"\r\tscore := Array with: 0 with: 0.\r\t\t\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\t| cell |\r\t\t\tcell := (cells at: row at: col).\r\t\t\t(cell = $B) ifTrue: [ score at: 1 put: ((score at: 1) + 1)].\r\t\t\t(cell = $W) ifTrue: [ score at: 2 put: ((score at: 2) + 1)].\r\t\t]\r\t]',			#stamp : 'CameronBierwagen 11/7/2019 23:03',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T23:03:39.808173-08:00' ],		#prior : OmReference [ '217' ],		#self : OmReference [ '218' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #getScores,			#protocol : #checking,			#sourceCode : 'getScores\r\r\t| score |\r\t\r\t"First index is Black, second is White"\r\tscore := Array with: 0 with: 0.\r\t\t\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\t| cell |\r\t\t\tcell := (cells at: row at: col).\r\t\t\t(cell = $B) ifTrue: [ score at: 1 put: ((score at: 1) + 1)].\r\t\t\t(cell = $W) ifTrue: [ score at: 2 put: ((score at: 2) + 1)].\r\t\t]\r\t]',			#stamp : 'CameronBierwagen 11/7/2019 23:03',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #getScores,			#protocol : #checking,			#sourceCode : 'getScores\r\r\t| scores |\r\t\r\t"First index is Black, second is White"\r\tscores := Array with: 0 with: 0.\r\t\t\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\t| cell |\r\t\t\tcell := (cells at: row at: col).\r\t\t\t(cell = $B) ifTrue: [ scores at: 1 put: ((scores at: 1) + 1)].\r\t\t\t(cell = $W) ifTrue: [ scores at: 2 put: ((scores at: 2) + 1)].\r\t\t]\r\t].\r^ scores',			#stamp : 'CameronBierwagen 11/7/2019 23:03',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T23:11:43.072623-08:00' ],		#prior : OmReference [ '218' ],		#self : OmReference [ '219' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #endGame,			#protocol : #playing,			#sourceCode : 'endGame\r\t"Tally the score and declare a winner"\r\t',			#stamp : 'CameronBierwagen 11/7/2019 21:07',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #endGame,			#protocol : #playing,			#sourceCode : 'endGame\r\t"Tally the score and declare a winner"\r\t| scores message |\r\tscores := board getScores.\r\t\r\tmessage := \'Black wins!\'.\r\t\r\t((scores at: 1) = (scores at: 2)) ifTrue: [ message := \'The game is a draw.\' ] ifFalse: [ \r\t\t((scores at: 1) < (scores at: 2)) ifTrue: [ message := \'White wins!\' ]\r\t].\r\t',			#stamp : 'CameronBierwagen 11/7/2019 23:11',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T23:16:59.645878-08:00' ],		#prior : OmReference [ '219' ],		#self : OmReference [ '220' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #endGame,			#protocol : #playing,			#sourceCode : 'endGame\r\t"Tally the score and declare a winner"\r\t| scores message |\r\tscores := board getScores.\r\t\r\tmessage := \'Black wins!\'.\r\t\r\t((scores at: 1) = (scores at: 2)) ifTrue: [ message := \'The game is a draw.\' ] ifFalse: [ \r\t\t((scores at: 1) < (scores at: 2)) ifTrue: [ message := \'White wins!\' ]\r\t].\r\t',			#stamp : 'CameronBierwagen 11/7/2019 23:11',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #endGame,			#protocol : #playing,			#sourceCode : 'endGame\r\t"Tally the score and declare a winner"\r\t| scores message |\r\tscores := board getScores.\r\t\r\tmessage := \'Black wins!\'.\r\t\r\t((scores at: 1) = (scores at: 2)) ifTrue: [ message := \'The game is a draw.\' ] ifFalse: [ \r\t\t((scores at: 1) < (scores at: 2)) ifTrue: [ message := \'White wins!\' ]\r\t].\r\r\t(UIManager default message:\r\t\t(String streamContents: [ :stream | \r\t\t\tstream nextPutAll: (board boardAsString); cr;\r\t\t\tnextPutAll: \'The final score is:\'; cr;\r\t\t\tnextPutAll: \'Black: \'; nextPutAll: (scores at: 1); nextPutAll: \' points.\'; cr;\r\t\t\tnextPutAll: \'White: \'; nextPutAll: (scores at: 2); nextPutAll: \' points.\'; cr;\r\t\t\tnextPutAll: message.\r\t\t])\r\t\ttitle: \'Game Over!\').\r\t',			#stamp : 'CameronBierwagen 11/7/2019 23:16',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T23:17:42.986318-08:00' ],		#prior : OmReference [ '220' ],		#self : OmReference [ '221' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #endGame,			#protocol : #playing,			#sourceCode : 'endGame\r\t"Tally the score and declare a winner"\r\t| scores message |\r\tscores := board getScores.\r\t\r\tmessage := \'Black wins!\'.\r\t\r\t((scores at: 1) = (scores at: 2)) ifTrue: [ message := \'The game is a draw.\' ] ifFalse: [ \r\t\t((scores at: 1) < (scores at: 2)) ifTrue: [ message := \'White wins!\' ]\r\t].\r\r\t(UIManager default message:\r\t\t(String streamContents: [ :stream | \r\t\t\tstream nextPutAll: (board boardAsString); cr;\r\t\t\tnextPutAll: \'The final score is:\'; cr;\r\t\t\tnextPutAll: \'Black: \'; nextPutAll: (scores at: 1); nextPutAll: \' points.\'; cr;\r\t\t\tnextPutAll: \'White: \'; nextPutAll: (scores at: 2); nextPutAll: \' points.\'; cr;\r\t\t\tnextPutAll: message.\r\t\t])\r\t\ttitle: \'Game Over!\').\r\t',			#stamp : 'CameronBierwagen 11/7/2019 23:16',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #endGame,			#protocol : #playing,			#sourceCode : 'endGame\r\t"Tally the score and declare a winner"\r\t| scores message |\r\tscores := board getScores.\r\t\r\tmessage := \'Black wins!\'.\r\t\r\t((scores at: 1) = (scores at: 2)) ifTrue: [ message := \'The game is a draw.\' ] ifFalse: [ \r\t\t((scores at: 1) < (scores at: 2)) ifTrue: [ message := \'White wins!\' ]\r\t].\r\r\t(UIManager default message:\r\t\t(String streamContents: [ :stream | \r\t\t\tstream nextPutAll: (board boardAsString); cr;\r\t\t\tnextPutAll: \'The final score is:\'; cr;\r\t\t\tnextPutAll: \'Black: \'; nextPutAll: (scores at: 1) asString; nextPutAll: \' points.\'; cr;\r\t\t\tnextPutAll: \'White: \'; nextPutAll: (scores at: 2) asString; nextPutAll: \' points.\'; cr;\r\t\t\tnextPutAll: message.\r\t\t])\r\t\ttitle: \'Game Over!\').\r\t',			#stamp : 'CameronBierwagen 11/7/2019 23:17',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T23:18:48.636108-08:00' ],		#prior : OmReference [ '221' ],		#self : OmReference [ '222' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #endGame,			#protocol : #playing,			#sourceCode : 'endGame\r\t"Tally the score and declare a winner"\r\t| scores message |\r\tscores := board getScores.\r\t\r\tmessage := \'Black wins!\'.\r\t\r\t((scores at: 1) = (scores at: 2)) ifTrue: [ message := \'The game is a draw.\' ] ifFalse: [ \r\t\t((scores at: 1) < (scores at: 2)) ifTrue: [ message := \'White wins!\' ]\r\t].\r\r\t(UIManager default message:\r\t\t(String streamContents: [ :stream | \r\t\t\tstream nextPutAll: (board boardAsString); cr;\r\t\t\tnextPutAll: \'The final score is:\'; cr;\r\t\t\tnextPutAll: \'Black: \'; nextPutAll: (scores at: 1) asString; nextPutAll: \' points.\'; cr;\r\t\t\tnextPutAll: \'White: \'; nextPutAll: (scores at: 2) asString; nextPutAll: \' points.\'; cr;\r\t\t\tnextPutAll: message.\r\t\t])\r\t\ttitle: \'Game Over!\').\r\t',			#stamp : 'CameronBierwagen 11/7/2019 23:17',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #endGame,			#protocol : #playing,			#sourceCode : 'endGame\r\t"Tally the score and declare a winner"\r\t| scores message |\r\t\r\tactive := false.\r\t\r\tscores := board getScores.\r\t\r\tmessage := \'Black wins!\'.\r\t\r\t((scores at: 1) = (scores at: 2)) ifTrue: [ message := \'The game is a draw.\' ] ifFalse: [ \r\t\t((scores at: 1) < (scores at: 2)) ifTrue: [ message := \'White wins!\' ]\r\t].\r\r\t(UIManager default message:\r\t\t(String streamContents: [ :stream | \r\t\t\tstream nextPutAll: (board boardAsString); cr;\r\t\t\tnextPutAll: \'The final score is:\'; cr;\r\t\t\tnextPutAll: \'Black: \'; nextPutAll: (scores at: 1) asString; nextPutAll: \' points.\'; cr;\r\t\t\tnextPutAll: \'White: \'; nextPutAll: (scores at: 2) asString; nextPutAll: \' points.\'; cr;\r\t\t\tnextPutAll: message.\r\t\t])\r\t\ttitle: \'Game Over!\').\r\t',			#stamp : 'CameronBierwagen 11/7/2019 23:18',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-07T23:20:17.934522-08:00' ],		#prior : OmReference [ '222' ],		#self : OmReference [ '223' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tsuper initialize.\r\tboard := ReversiBoard new.\r\tturn := $B.\r\tactive := true.\r\t\r\t[ active ] whileTrue: [ \r\t\tself takeTurn.\r\t\tself nextTurn.\r\t\tactive := (board checkForLegalMoves: turn).\r\t]',			#stamp : 'CameronBierwagen 11/7/2019 22:43',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tsuper initialize.\r\tboard := ReversiBoard new.\r\tturn := $B.\r\tactive := true.\r\t\r\t[ active ] whileTrue: [ \r\t\tself takeTurn.\r\t\tself nextTurn.\r\t\tactive := (active and: [board checkForLegalMoves: turn]).\r\t]',			#stamp : 'CameronBierwagen 11/7/2019 23:20',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-08T13:31:54.457657-08:00' ],		#prior : OmReference [ '223' ],		#self : OmReference [ '224' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tsuper initialize.\r\tboard := ReversiBoard new.\r\tturn := $B.\r\tactive := true.\r\t\r\t[ active ] whileTrue: [ \r\t\tself takeTurn.\r\t\tself nextTurn.\r\t\tactive := (active and: [board checkForLegalMoves: turn]).\r\t]',			#stamp : 'CameronBierwagen 11/7/2019 23:20',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tsuper initialize.\r\tboard := ReversiBoard new.\r\tturn := $B.\r\tactive := true.\r\t\r\t[ active ] whileTrue: [ \r\t\tself takeTurn.\r\t\tself nextTurn.\r\t\tactive := (active and: [board checkForLegalMoves: turn]).\r\t].\r\r\tself endGame.',			#stamp : 'CameronBierwagen 11/8/2019 13:31',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-08T13:33:23.361116-08:00' ],		#prior : OmReference [ '224' ],		#self : OmReference [ '225' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #takeTurn,			#protocol : #playing,			#sourceCode : 'takeTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input |\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tinput ifNil: [ self endGame. ^false ].\r\tsuccess := (self moveFromInput: input).\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ self endGame. ^false ].\r\t\tsuccess := (self moveFromInput: input)\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/7/2019 22:39',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #takeTurn,			#protocol : #playing,			#sourceCode : 'takeTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input |\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tinput ifNil: [ ^false ].\r\tsuccess := (self moveFromInput: input).\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ ^false ].\r\t\tsuccess := (self moveFromInput: input)\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/8/2019 13:33',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-08T13:35:20.036372-08:00' ],		#prior : OmReference [ '225' ],		#self : OmReference [ '226' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #takeTurn,			#protocol : #playing,			#sourceCode : 'takeTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input |\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tinput ifNil: [ ^false ].\r\tsuccess := (self moveFromInput: input).\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ ^false ].\r\t\tsuccess := (self moveFromInput: input)\r\t].\r^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/8/2019 13:33',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #takeTurn,			#protocol : #playing,			#sourceCode : 'takeTurn\r\t"Print instructions for the player whose turn it is."\r\t| success input |\r\tsuccess := false.\r\t\r\tinput := self requestInput.\r\tinput ifNil: [ ^false ].\r\tsuccess := (self moveFromInput: input).\r\t\r\t\r\t"The first attempt didn\'t work."\r\t[ success ] whileFalse: [\r\t\tinput := self requestInputWithError.\r\t\tinput ifNil: [ ^false ].\r\t\tsuccess := (self moveFromInput: input)\r\t].\r\tself nextTurn.\r\t^true.\r\t\r\t',			#stamp : 'CameronBierwagen 11/8/2019 13:35',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-08T13:36:10.731074-08:00' ],		#prior : OmReference [ '226' ],		#self : OmReference [ '227' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tsuper initialize.\r\tboard := ReversiBoard new.\r\tturn := $B.\r\tactive := true.\r\t\r\t[ active ] whileTrue: [ \r\t\tself takeTurn.\r\t\tself nextTurn.\r\t\tactive := (active and: [board checkForLegalMoves: turn]).\r\t].\r\r\tself endGame.',			#stamp : 'CameronBierwagen 11/8/2019 13:31',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tsuper initialize.\r\tboard := ReversiBoard new.\r\tturn := $B.\r\tactive := true.\r\t\r\t[ active ] whileTrue: [ \t\t\r\t\tactive := ((self takeTurn) and: [board checkForLegalMoves: turn]).\r\t].\r\r\tself endGame.',			#stamp : 'CameronBierwagen 11/8/2019 13:36',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-08T13:37:08.228657-08:00' ],		#prior : OmReference [ '227' ],		#self : OmReference [ '228' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #endGame,			#protocol : #playing,			#sourceCode : 'endGame\r\t"Tally the score and declare a winner"\r\t| scores message |\r\t\r\tactive := false.\r\t\r\tscores := board getScores.\r\t\r\tmessage := \'Black wins!\'.\r\t\r\t((scores at: 1) = (scores at: 2)) ifTrue: [ message := \'The game is a draw.\' ] ifFalse: [ \r\t\t((scores at: 1) < (scores at: 2)) ifTrue: [ message := \'White wins!\' ]\r\t].\r\r\t(UIManager default message:\r\t\t(String streamContents: [ :stream | \r\t\t\tstream nextPutAll: (board boardAsString); cr;\r\t\t\tnextPutAll: \'The final score is:\'; cr;\r\t\t\tnextPutAll: \'Black: \'; nextPutAll: (scores at: 1) asString; nextPutAll: \' points.\'; cr;\r\t\t\tnextPutAll: \'White: \'; nextPutAll: (scores at: 2) asString; nextPutAll: \' points.\'; cr;\r\t\t\tnextPutAll: message.\r\t\t])\r\t\ttitle: \'Game Over!\').\r\t',			#stamp : 'CameronBierwagen 11/7/2019 23:18',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #endGame,			#protocol : #playing,			#sourceCode : 'endGame\r\t"Tally the score and declare a winner"\r\t| scores message |\r\t\r\t"This has likely already been made false, but let\'s be safe."\r\tactive := false.\r\t\r\tscores := board getScores.\r\t\r\tmessage := \'Black wins!\'.\r\t\r\t((scores at: 1) = (scores at: 2)) ifTrue: [ message := \'The game is a draw.\' ] ifFalse: [ \r\t\t((scores at: 1) < (scores at: 2)) ifTrue: [ message := \'White wins!\' ]\r\t].\r\r\t(UIManager default message:\r\t\t(String streamContents: [ :stream | \r\t\t\tstream nextPutAll: (board boardAsString); cr;\r\t\t\tnextPutAll: \'The final score is:\'; cr;\r\t\t\tnextPutAll: \'Black: \'; nextPutAll: (scores at: 1) asString; nextPutAll: \' points.\'; cr;\r\t\t\tnextPutAll: \'White: \'; nextPutAll: (scores at: 2) asString; nextPutAll: \' points.\'; cr;\r\t\t\tnextPutAll: message.\r\t\t])\r\t\ttitle: \'Game Over!\').\r\t',			#stamp : 'CameronBierwagen 11/8/2019 13:37',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-08T13:43:21.144092-08:00' ],		#prior : OmReference [ '228' ],		#self : OmReference [ '229' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #start,			#protocol : #playing,			#sourceCode : 'start\r\t[ active ] whileTrue: [ \t\t\r\t\tactive := ((self takeTurn) and: [board checkForLegalMoves: turn]).\r\t].\r\r\tself endGame.',			#stamp : 'CameronBierwagen 11/8/2019 13:43',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-08T13:43:30.441238-08:00' ],		#prior : OmReference [ '229' ],		#self : OmReference [ '230' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tsuper initialize.\r\tboard := ReversiBoard new.\r\tturn := $B.\r\tactive := true.\r\t\r\t[ active ] whileTrue: [ \t\t\r\t\tactive := ((self takeTurn) and: [board checkForLegalMoves: turn]).\r\t].\r\r\tself endGame.',			#stamp : 'CameronBierwagen 11/8/2019 13:36',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tsuper initialize.\r\tboard := ReversiBoard new.\r\tturn := $B.\r\tactive := true.\r\t\r\tself start.',			#stamp : 'CameronBierwagen 11/8/2019 13:43',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-08T13:43:42.385963-08:00' ],		#prior : OmReference [ '230' ],		#self : OmReference [ '231' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tsuper initialize.\r\tboard := ReversiBoard new.\r\tturn := $B.\r\tactive := true.\r\t\r\tself start.',			#stamp : 'CameronBierwagen 11/8/2019 13:43',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tsuper initialize.\r\tboard := ReversiBoard new.\r\tturn := $B.\r\tactive := true.',			#stamp : 'CameronBierwagen 11/8/2019 13:43',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-08T13:43:49.4117-08:00' ],		#prior : OmReference [ '231' ],		#self : OmReference [ '232' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tsuper initialize.\r\tboard := ReversiBoard new.\r\tturn := $B.\r\tactive := true.',			#stamp : 'CameronBierwagen 11/8/2019 13:43',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #initialize,			#protocol : #initalize,			#sourceCode : 'initialize\t\t\r\tsuper initialize.\r\tboard := ReversiBoard new.\r\tturn := $B.\r\tactive := false.',			#stamp : 'CameronBierwagen 11/8/2019 13:43',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-08T13:44:01.11643-08:00' ],		#prior : OmReference [ '232' ],		#self : OmReference [ '233' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #start,			#protocol : #playing,			#sourceCode : 'start\r\t[ active ] whileTrue: [ \t\t\r\t\tactive := ((self takeTurn) and: [board checkForLegalMoves: turn]).\r\t].\r\r\tself endGame.',			#stamp : 'CameronBierwagen 11/8/2019 13:43',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #start,			#protocol : #playing,			#sourceCode : 'start\r\tactive := true.\r\t\r\t[ active ] whileTrue: [ \t\t\r\t\tactive := ((self takeTurn) and: [board checkForLegalMoves: turn]).\r\t].\r\r\tself endGame.',			#stamp : 'CameronBierwagen 11/8/2019 13:44',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-08T13:44:24.343213-08:00' ],		#prior : OmReference [ '233' ],		#self : OmReference [ '234' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #start,			#protocol : #playing,			#sourceCode : 'start\r\tactive := true.\r\t\r\t[ active ] whileTrue: [ \t\t\r\t\tactive := ((self takeTurn) and: [board checkForLegalMoves: turn]).\r\t].\r\r\tself endGame.',			#stamp : 'CameronBierwagen 11/8/2019 13:44',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #start,			#protocol : #playing,			#sourceCode : 'start\r\tactive := true.\r\t\r\t[ active ] whileTrue: [ \t\t\r\t\tactive := ((self takeTurn) and: [board checkForLegalMoves: turn]).\r\t\tTranscript show: (board getScores).\r\t].\r\r\tself endGame.',			#stamp : 'CameronBierwagen 11/8/2019 13:44',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-08T13:45:58.406051-08:00' ],		#prior : OmReference [ '234' ],		#self : OmReference [ '235' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #getScores,			#protocol : #checking,			#sourceCode : 'getScores\r\r\t| scores |\r\t\r\t"First index is Black, second is White"\r\tscores := Array with: 0 with: 0.\r\t\t\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\t| cell |\r\t\t\tcell := (cells at: row at: col).\r\t\t\t(cell = $B) ifTrue: [ scores at: 1 put: ((scores at: 1) + 1)].\r\t\t\t(cell = $W) ifTrue: [ scores at: 2 put: ((scores at: 2) + 1)].\r\t\t]\r\t].\r^ scores',			#stamp : 'CameronBierwagen 11/7/2019 23:03',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiBoard			},			#name : #getScores,			#protocol : #checking,			#sourceCode : 'getScores\r\r\t| scores |\r\t\r\t"First index is Black, second is White"\r\tscores := Array with: 0 with: 0.\r\t\t\t\r\t1 to: 8 do: [ :row |\r\t\t1 to: 8 do: [ :col |\r\t\t\t| cell |\r\t\t\tcell := (cells at: row at: col).\r\t\t\t(cell state = $B) ifTrue: [ scores at: 1 put: ((scores at: 1) + 1)].\r\t\t\t(cell state = $W) ifTrue: [ scores at: 2 put: ((scores at: 2) + 1)].\r\t\t]\r\t].\r^ scores',			#stamp : 'CameronBierwagen 11/8/2019 13:45',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'CameronBierwagen',		#time : DateAndTime [ '2019-11-08T13:46:28.014937-08:00' ],		#prior : OmReference [ '235' ],		#self : OmReference [ '236' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #start,			#protocol : #playing,			#sourceCode : 'start\r\tactive := true.\r\t\r\t[ active ] whileTrue: [ \t\t\r\t\tactive := ((self takeTurn) and: [board checkForLegalMoves: turn]).\r\t\tTranscript show: (board getScores).\r\t].\r\r\tself endGame.',			#stamp : 'CameronBierwagen 11/8/2019 13:44',			#package : #Reversi		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #ReversiGame			},			#name : #start,			#protocol : #playing,			#sourceCode : 'start\r\tactive := true.\r\t\r\t[ active ] whileTrue: [ \t\t\r\t\tactive := ((self takeTurn) and: [board checkForLegalMoves: turn]).\r\t].\r\r\tself endGame.',			#stamp : 'CameronBierwagen 11/8/2019 13:46',			#package : #Reversi		}	}}OmEntry {	#tags : {		#author : 'AutoDeprecationRefactoring',		#time : DateAndTime [ '2019-11-08T13:54:13.206674-08:00' ],		#prior : OmReference [ '236' ],		#self : OmReference [ '237' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #IceTipRepositoriesBrowser			},			#name : #initializeRepositoryList,			#protocol : #initialization,			#sourceCode : 'initializeRepositoryList\r\trepositoryList widget \r\t\tbeResizable;\r\t\taddColumn: (IceTipTableColumn new \r\t\t\tid: \'Name\';\r\t\t\taction: #descriptionWithDecoration;\r\t\t\twidth: 200;\r\t\t\tyourself);\r\t\taddColumn: (IceTipTableColumn new \r\t\t\tid: \'Status\';\r\t\t\taction: #status;\r\t\t\twidth: 150;\r\t\t\tyourself);\r\t\taddColumn: (IceTipTableColumn new \r\t\t\tid: \'Branch\';\r\t\t\taction: #branchName;\r\t\t\tyourself);\r\t\tdataSource: self newRepositoriesDataSource;\r\t\tselectRowIndex: 1;\r\t\tenableFilter: IceTipRepositoryFilter;\t\t\t\r\t\texplicitFunction',			#stamp : '',			#package : #Iceberg-TipUI		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #IceTipRepositoriesBrowser			},			#name : #initializeRepositoryList,			#protocol : #initialization,			#sourceCode : 'initializeRepositoryList\r\trepositoryList widget\r\t\tbeResizable;\r\t\taddColumn:\r\t\t\t(IceTipTableColumn new\r\t\t\t\tid: \'Name\';\r\t\t\t\taction: #descriptionWithDecoration;\r\t\t\t\twidth: 200;\r\t\t\t\tyourself);\r\t\taddColumn:\r\t\t\t(IceTipTableColumn new\r\t\t\t\tid: \'Status\';\r\t\t\t\taction: #status;\r\t\t\t\twidth: 150;\r\t\t\t\tyourself);\r\t\taddColumn:\r\t\t\t(IceTipTableColumn new\r\t\t\t\tid: \'Branch\';\r\t\t\t\taction: #branchName;\r\t\t\t\tyourself);\r\t\tdataSource: self newRepositoriesDataSource;\r\t\tselectIndex: 1;\r\t\tenableFilter: IceTipRepositoryFilter;\r\t\texplicitFunction',			#stamp : 'AutoDeprecationRefactoring 11/8/2019 13:54',			#package : #Iceberg-TipUI		}	}}OmEntry {	#tags : {		#author : 'AutoDeprecationRefactoring',		#time : DateAndTime [ '2019-11-08T13:54:21.189869-08:00' ],		#prior : OmReference [ '237' ],		#self : OmReference [ '238' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #IceTipRepairRepositoryDialog			},			#name : #'selectionChanged:',			#protocol : #private,			#sourceCode : 'selectionChanged: ann\r\tselectedOption := ann newSelectedRowIndexes \r\t\tifNotEmpty: [ :indexes |(self optionsList widget dataSource elementAt: indexes first) ]\r\t\tifEmpty: [ nil ].\r\tself refreshDetailPanel',			#stamp : '',			#package : #Iceberg-TipUI		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #IceTipRepairRepositoryDialog			},			#name : #'selectionChanged:',			#protocol : #private,			#sourceCode : 'selectionChanged: ann\r\tselectedOption := ann newSelectedIndexes\r\t\tifNotEmpty:\r\t\t\t[ :indexes | self optionsList widget dataSource elementAt: indexes first ]\r\t\tifEmpty: [ nil ].\r\tself refreshDetailPanel',			#stamp : 'AutoDeprecationRefactoring 11/8/2019 13:54',			#package : #Iceberg-TipUI		}	}}OmEntry {	#tags : {		#author : 'AutoDeprecationRefactoring',		#time : DateAndTime [ '2019-11-08T13:58:35.789105-08:00' ],		#prior : OmReference [ '238' ],		#self : OmReference [ '239' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #IceTipOptionDialog			},			#name : #selectFirst,			#protocol : #private,			#sourceCode : 'selectFirst\r\ttypeList widget selectRowIndex: 1.\r\tself basicSelectionChanged: self allTypes first \t',			#stamp : '',			#package : #Iceberg-TipUI		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #IceTipOptionDialog			},			#name : #selectFirst,			#protocol : #private,			#sourceCode : 'selectFirst\r\ttypeList widget selectIndex: 1.\r\tself basicSelectionChanged: self allTypes first',			#stamp : 'AutoDeprecationRefactoring 11/8/2019 13:58',			#package : #Iceberg-TipUI		}	}}OmEntry {	#tags : {		#author : 'AutoDeprecationRefactoring',		#time : DateAndTime [ '2019-11-08T13:58:35.801088-08:00' ],		#prior : OmReference [ '239' ],		#self : OmReference [ '240' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #IceTipOptionDialog			},			#name : #'selectionChanged:',			#protocol : #private,			#sourceCode : 'selectionChanged: ann\r\tself basicSelectionChanged: (ann newSelectedRowIndexes\r\t\tifNotEmpty: [ :indexes |\tself typeList widget dataSource realElementAt: indexes first ]\r\t\tifEmpty: [ nil ])',			#stamp : '',			#package : #Iceberg-TipUI		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #IceTipOptionDialog			},			#name : #'selectionChanged:',			#protocol : #private,			#sourceCode : 'selectionChanged: ann\r\tself\r\t\tbasicSelectionChanged:\r\t\t\t(ann newSelectedIndexes\r\t\t\t\tifNotEmpty:\r\t\t\t\t\t[ :indexes | self typeList widget dataSource realElementAt: indexes first ]\r\t\t\t\tifEmpty: [ nil ])',			#stamp : 'AutoDeprecationRefactoring 11/8/2019 13:58',			#package : #Iceberg-TipUI		}	}}